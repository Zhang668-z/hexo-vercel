{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","path":"img/default.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","path":"js/boot.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","path":"js/events.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","path":"js/plugins.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/mapStruct简介.md","hash":"ba6035102afce00f70e7a033c07723ee0fd46a3a","modified":1626782845000},{"_id":"source/_posts/WebMagic的简单使用.md","hash":"89d085f8bb5eb7e3437d4c13d0872f88ce8efb21","modified":1640426734000},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1640487140134},{"_id":"source/.DS_Store","hash":"3abb5e7f23ecdb4791b226c24dec86ba0cfaf654","modified":1640502501414},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1640493429918},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1640493429922},{"_id":"node_modules/hexo-theme-fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1640493429881},{"_id":"node_modules/hexo-theme-fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1640493429882},{"_id":"node_modules/hexo-theme-fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1640493429881},{"_id":"node_modules/hexo-theme-fluid/LICENSE","hash":"df5b54be535593d5442cebafbea34eb9bd69b987","modified":1640493429883},{"_id":"node_modules/hexo-theme-fluid/README.md","hash":"03cfa8e5f149514b57ef80dcb84eb7fea261370d","modified":1640493429913},{"_id":"node_modules/hexo-theme-fluid/package.json","hash":"75307bb0df13aab43ce8c23cf57c6b850ecb7bf1","modified":1640493429912},{"_id":"node_modules/hexo-theme-fluid/README_en.md","hash":"ca8fd19a4948de1f253616a62c0e8a7d81f692f5","modified":1640493429913},{"_id":"node_modules/hexo-theme-fluid/_config.yml","hash":"e2e831ab07ba61666ab26cadffd298f40532470d","modified":1640493429924},{"_id":"node_modules/hexo-theme-fluid/languages/eo.yml","hash":"a0c7984495d4f2d33b64adfa33adebbf768a5ac3","modified":1640493429924},{"_id":"node_modules/hexo-theme-fluid/languages/en.yml","hash":"a85dcc5cc21f9cab50df31e5001b8818ee62d1e2","modified":1640493429924},{"_id":"node_modules/hexo-theme-fluid/languages/de.yml","hash":"13a6a799415fc2f6f69ebd1a399fb44426a5d641","modified":1640493429924},{"_id":"node_modules/hexo-theme-fluid/languages/zh-CN.yml","hash":"21307b4137c3d9b04bb58243747e75af0abc5a71","modified":1640493429925},{"_id":"node_modules/hexo-theme-fluid/languages/ja.yml","hash":"91020031a847c0361a6fd7ab990c7be4bf17529b","modified":1640493429924},{"_id":"node_modules/hexo-theme-fluid/languages/zh-TW.yml","hash":"1a6d415446da11dee5c5f400e7d67544fbe743ea","modified":1640493429925},{"_id":"node_modules/hexo-theme-fluid/layout/404.ejs","hash":"689d9f4efd2a7f5edfd9b24561a7ade69d46617c","modified":1640493429886},{"_id":"node_modules/hexo-theme-fluid/layout/archive.ejs","hash":"472d0813ca5b88000a7bc6039f33b7e27b5a3216","modified":1640493429889},{"_id":"node_modules/hexo-theme-fluid/layout/about.ejs","hash":"ad6fed7b646d3ca961db83db0fbe020e3a5d42ad","modified":1640493429887},{"_id":"node_modules/hexo-theme-fluid/layout/layout.ejs","hash":"7f566edf750241e62d7c54abfbb0c504fdab850a","modified":1640493429897},{"_id":"node_modules/hexo-theme-fluid/layout/links.ejs","hash":"2a7b49f0f9aecf07550b5a0b99242aab5654cf2b","modified":1640493429897},{"_id":"node_modules/hexo-theme-fluid/layout/categories.ejs","hash":"20c2a195a109d2a263b5fa6e79cbcc62932508ad","modified":1640493429890},{"_id":"node_modules/hexo-theme-fluid/layout/category.ejs","hash":"58291dfec65c36889dfce0ddc603540b67e4c598","modified":1640493429891},{"_id":"node_modules/hexo-theme-fluid/layout/page.ejs","hash":"1014b901d396f4fc445cb1ffc938d5380d894d71","modified":1640493429898},{"_id":"node_modules/hexo-theme-fluid/layout/index.ejs","hash":"f3ae4395e751c4a02d5895e07856b1e8edfdda08","modified":1640493429894},{"_id":"node_modules/hexo-theme-fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1640493429900},{"_id":"node_modules/hexo-theme-fluid/layout/tag.ejs","hash":"0ad89eb7c92a822980fa9a85285e6d94ad845d1d","modified":1640493429900},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"af977ed0792508bb0766ea8afe82d34ef1e8fb3c","modified":1640493429912},{"_id":"node_modules/hexo-theme-fluid/scripts/events/index.js","hash":"44faef3e77ab08b91e4c5c6f1cd9087a9faff443","modified":1640493429907},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"16d33eb89ecf90f4046720fde5395d972c7ba1fd","modified":1640493429912},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1640493429912},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1640493429913},{"_id":"node_modules/hexo-theme-fluid/layout/post.ejs","hash":"79e3679a7069351a6172c281b9d09f59d7580484","modified":1640493429899},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1640493429909},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/post-filter.js","hash":"6c37e9f1ac1d6d00b3c32794e02e244dba942cd9","modified":1640493429911},{"_id":"node_modules/hexo-theme-fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1640493429922},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1640493429910},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/export-config.js","hash":"cde964c8cd3217268a231de5e018a62c53c2e047","modified":1640493429906},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"e24b470f7aa8044499a4f5e39634e5dc43899011","modified":1640493429913},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1640493429908},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/utils.js","hash":"3aa5b4ea879cd34d3a32468d88da18d72cbcc8e0","modified":1640493429911},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1640493429912},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1640493429910},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1640493429907},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1640493429907},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/checkbox.js","hash":"63468f7875c09d9557fe8315afc97175745d9087","modified":1640493429904},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1640493429911},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1640493429909},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/wordcount.js","hash":"b917b893b1777e6ffcb53188f9f5644510e5f20d","modified":1640493429911},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1640493429909},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1640493429885},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1640493429913},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1640493429904},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1640493429915},{"_id":"node_modules/hexo-theme-fluid/source/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1640493429915},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1640493429903},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","hash":"d5a8a59c8d1fd17d699a951e59c4ce9ae44c419d","modified":1640493429920},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":1640493429904},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","hash":"2520c6459b544a4e965b838f8095e2a84390a43c","modified":1640493429904},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","hash":"53987b7a668ea0623370eb83ed5311766221b557","modified":1640493429908},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1640493429916},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","hash":"d058f30bd09b28769c4d8313428ff23dfc8d52dd","modified":1640493429911},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","hash":"633f0142c657805359b0197f287e12ae4bcde731","modified":1640493429909},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","hash":"4a43f2700e91937650bef511fd438825b001c4c6","modified":1640493429911},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":1640493429906},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1640493429905},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1640493429907},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1640493429911},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/archive-list.ejs","hash":"53a4f6029373a40394a87aba9284696a71610f90","modified":1640493429889},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1640493429922},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/beian.ejs","hash":"58b4bbe36386de4305a8da5ffd7d56802df23049","modified":1640493429890},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/object.js","hash":"649457796374c79e49a19bd541e4ad8e78fe8995","modified":1640493429910},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/post-meta.ejs","hash":"32a17edadeed40da6db21d2d8031bd47d2fc9bf4","modified":1640493429899},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1640493429899},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/scripts.ejs","hash":"0ee838b6fcd895d21a29d9d67dbb99b752d623d1","modified":1640493429900},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/nav.ejs","hash":"e71b3c4aa263163597d31b1f91e5a1a877084cfd","modified":1640493429898},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/footer.ejs","hash":"a62278c38a310da495d96c39abacacef266945cb","modified":1640493429894},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/css.ejs","hash":"c363829a4b80f74fc1c565e41f6dab41c95006ea","modified":1640493429891},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/head.ejs","hash":"f7f3494ed001e8cdcdc3e8a1d2cd1195cff2ded5","modified":1640493429894},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/search.ejs","hash":"cdd7919fa01f6ef7ccc09938d662ff3d77f5d999","modified":1640493429900},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/statistics.ejs","hash":"920bc618d357d48d2b96f8758f6ae8f9488fc4d8","modified":1640493429900},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/hello.js","hash":"28e186c32576eb3d5d923273471a001c47fe8071","modified":1640493429907},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/compatible-configs.js","hash":"b5fd5a2d9c463eb59318af0f47c591c485b6ad27","modified":1640493429905},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/merge-configs.js","hash":"c1db1a4f9eca6e36b660530641e3a4fb6a30c8d8","modified":1640493429909},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/footnote.js","hash":"3b2abc5f5e3b681874637e98e047dc4969eb1983","modified":1640493429907},{"_id":"node_modules/hexo-theme-fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1640493429917},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/highlight.js","hash":"deed966f38cf0c8dee3f72e5b1f2e878510db0e1","modified":1640493429907},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1640493429908},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1640493429921},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/toc.ejs","hash":"3d2fb5552f373e5a0c56bc356702d807bcbcb411","modified":1640493429901},{"_id":"node_modules/hexo-theme-fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1640493429917},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1640493429893},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1640493429894},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1640493429897},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/twikoo.ejs","hash":"1af53bc0be642610a3a4d4e7c05287854a821508","modified":1640493429901},{"_id":"node_modules/hexo-theme-fluid/source/css/_variables/base.styl","hash":"63aedd67d90d641cc672540db20ef615f528c9f1","modified":1640493429918},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/utterances.ejs","hash":"e1ed6530dfd7310f91060a75766a93ac3c39be3a","modified":1640493429901},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1640493429894},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1640493429891},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/valine.ejs","hash":"4052ab2a8f78efa92f0fe17abe8f66135943390a","modified":1640493429901},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/mermaid.ejs","hash":"10ed1f9a611449d37736e17c4e251127b38b3772","modified":1640493429898},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1640493429900},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/typed.ejs","hash":"e8e01c5db46b383748855452aecd70fcda99f598","modified":1640493429901},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/analytics.ejs","hash":"557077a8825fffc0a2c7fe2b29f319287950244f","modified":1640493429888},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/math.ejs","hash":"a7ed1d3079c32497c8955ca75f5fb6992e5ffb8b","modified":1640493429897},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1640493429898},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1640493429916},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/waline.ejs","hash":"21e00443054802e893aac1f668b69d5bb4b39b3a","modified":1640493429901},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/color-schema.styl","hash":"32fb938d72b2d86159cb315a98b086bd17fa4415","modified":1640493429919},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/rewrite.styl","hash":"c9ed5511053bddfcad3cb6000c641aef3284d95a","modified":1640493429921},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_archive/archive.styl","hash":"6e6f22b664199772370b59ce1678b0c148b5849f","modified":1640493429917},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/base.styl","hash":"cd55a2dce6b9d3e165a0a26d0b5bf7f649006bcd","modified":1640493429917},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_index/index.styl","hash":"616c1f7147078c3d532dd1cfd2af09c0c3a816f0","modified":1640493429920},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/inline.styl","hash":"d547ab0b91f84eb0acd0bc0c5d716ce17c30361a","modified":1640493429920},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_links/links.styl","hash":"7e32a3268accf3d524209c213e15e2d5d5e2e1a6","modified":1640493429920},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post.styl","hash":"3a6b4f8a29648d9d2c1e99b52a7b42df3f15cf62","modified":1640493429921},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/tag_plugin.styl","hash":"b89b96c8a6a433a6f372b42710554b05cab85a24","modified":1640493429922},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/categories.styl","hash":"1ab7db37c2f7dc7ccdb994dcb41c16a4c8920397","modified":1640493429919},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1640493429922},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1640493429920},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/banner.styl","hash":"30f8fab95a5214d79df0ccc02b937df8bd885676","modified":1640493429917},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/board.styl","hash":"910dc886a186d80c41221de0d43a2062a7dc543b","modified":1640493429918},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/copy-btn.styl","hash":"9f932ca3f9625c13aa5353f58319881e62c0c653","modified":1640493429919},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1640493429921},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1640493429920},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footer.styl","hash":"0ce7552dc4993926426019398d73e817cfd841a1","modified":1640493429919},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/header.styl","hash":"d8011325756eb6e4ce619b3e7b4d6d80c2de8a57","modified":1640493429920},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1640493429921},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"55e10a6965462f8f62f85e75fd5e143af02a4b44","modified":1640493429921},{"_id":"public/local-search.xml","hash":"3da742eae30de81a4e5aed94edd9d5867dcc3c39","modified":1640502549027},{"_id":"public/archives/index.html","hash":"5e91ba2148fa06fb51156ea82b87e80e8efa4cbc","modified":1640502549027},{"_id":"public/archives/2021/index.html","hash":"3853de377834ce372fd14bdd283e7c229b250643","modified":1640502549027},{"_id":"public/2021/12/26/hello-world/index.html","hash":"6009a85a9d644a0ae3c043b7aa0ee7e07e1b3ad0","modified":1640502549027},{"_id":"public/archives/2021/06/index.html","hash":"3d193e43f489d08358c31e5be0324a140b2637f7","modified":1640502549027},{"_id":"public/archives/2021/07/index.html","hash":"e668d2cd960e49d667813b4bf147074ad67f82c2","modified":1640502549027},{"_id":"public/archives/2021/12/index.html","hash":"948fd4b52b0d904d92709991a76cd7d06ad834fe","modified":1640502549027},{"_id":"public/index.html","hash":"b2a3ad58ec28063d92a2bfce885060a81a94a4b4","modified":1640502549027},{"_id":"public/404.html","hash":"3da9f3535f791625bbc4d7ac5bb5189966c7a217","modified":1640502549027},{"_id":"public/tags/index.html","hash":"40d6f00fbe2321d6a622a1cc60dfce35885a5ea8","modified":1640502549027},{"_id":"public/categories/index.html","hash":"6f8d4567319356d9b7de976b9676d2f433496af9","modified":1640502549027},{"_id":"public/links/index.html","hash":"d7257ca7aa57a369cefff4b870f893bf47ebf0e5","modified":1640502549027},{"_id":"public/2021/07/20/mapStruct简介/index.html","hash":"c5ea7abf2fc6363706aebb8ffa2504c9a3304712","modified":1640502549027},{"_id":"public/2021/06/05/WebMagic的简单使用/index.html","hash":"59d81a497142225448b704dc48b393dbb52f6239","modified":1640502549027},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1640502549027},{"_id":"public/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1640502549027},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1640502549027},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1640502549027},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1640502549027},{"_id":"public/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1640502549027},{"_id":"public/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":1640502549027},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1640502549027},{"_id":"public/js/plugins.js","hash":"d058f30bd09b28769c4d8313428ff23dfc8d52dd","modified":1640502549027},{"_id":"public/js/local-search.js","hash":"633f0142c657805359b0197f287e12ae4bcde731","modified":1640502549027},{"_id":"public/js/leancloud.js","hash":"53987b7a668ea0623370eb83ed5311766221b557","modified":1640502549027},{"_id":"public/js/utils.js","hash":"4a43f2700e91937650bef511fd438825b001c4c6","modified":1640502549027},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1640502549027},{"_id":"public/js/color-schema.js","hash":"2520c6459b544a4e965b838f8095e2a84390a43c","modified":1640502549027},{"_id":"public/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":1640502549027},{"_id":"public/css/main.css","hash":"84ccbdc7c8aadc034c514050e58c7298ce3b088d","modified":1640502549027}],"Category":[],"Data":[],"Page":[],"Post":[{"_content":"\n\n### 1、mapStruct简介\n\n- 官网：[MapStruct – Java bean mappings, the easy way!](https://mapstruct.org/)\n- 中文文档：[MapStruct 1.3.0.Final参考指南 (kailing.pub)](http://www.kailing.pub/MapStruct1.3/index.html)\n- 使用场景：\n\n![image-20210620163904556](https://pic-markdown.oss-cn-beijing.aliyuncs.com/Java%E7%AC%94%E8%AE%B0/img/20210620163904.png)\n\n### 2、BeansUtils和MapStruct的对比\n\n#### 2.1 相同之处\n\n- 拷贝简单对象的时候都是深拷贝\n- 拷贝复杂对象的时候都是浅拷贝\n\n\n\n>复杂对象：类中属性包括对象属性的类为复杂对象\n\n> 深拷贝：是增加了一个指针并且申请了一个新的内存，使这个增加的指针指向这个新的内存\n>\n> 浅拷贝：只是增加了一个指针指向已存在的内存地址\n\n\n\n#### 2.2 不同之处\n\n- BeanUtils在java虚拟机运行期间通过反射实现，效率低下\n- BeanUtils的属性拷贝在判断空值和不同类型的属性时有很多障碍 产生Bug\n- MapStruct基于JSR269 API实现，在代码编译期间通过getter/setter来实现 对代码运行效率没有性能上的损耗 \n- MapStruct有非常灵活的策略和转化方式，自定义性比较强。\n- MapStruct支持不同的source和target基本类型自动转换，包括在超类型上声明的属性\n- 支持lombok中的model的builder链式调用 应用到ConverterImpl中\n\n>JSR269：插入式注解处理API 是用于处理注解（元数据，[JSR175](https://www.jcp.org/en/jsr/detail?id=269)）的一套API。其API位于`javax.annotation.processing`和`javax.lang.model`包下。\n>\n>插入式注解处理API可以让你在编译期访问注解元数据，处理和自定义你的编译输出，像反射一样访问类、字段、方法和注解等元素，创建新的源文件等等。可用于减少编写配置文件的劳动量，提高代码可读性等等。\n\n\n\n### 3. MapStruct的简单使用\n\n#### 3.1 依赖\n\n```xml\n...\n<properties>\n    <org.mapstruct.version>1.4.2.Final</org.mapstruct.version>\n</properties>\n...\n<dependencies>\n    <dependency>\n        <groupId>org.mapstruct</groupId>\n        <artifactId>mapstruct</artifactId>\n        <version>${org.mapstruct.version}</version>\n    </dependency>\n</dependencies>\n...\n<build>\n    <pluginManagement>\n      <plugins>\n        <plugin>\n          <artifactId>maven-compiler-plugin</artifactId>\n          <version>3.8.1</version>\n          <configuration>\n            <source>1.8</source> <!-- depending on your project -->\n            <target>1.8</target> <!-- depending on your project -->\n            <annotationProcessorPaths>\n              <path>\n                <groupId>org.mapstruct</groupId>\n                <artifactId>mapstruct-processor</artifactId>\n                <version>1.4.2.Final</version>\n              </path>\n              <path>\n                  <groupId>org.projectlombok</groupId>\n                  <artifactId>lombok</artifactId>\n                  <version>1.18.12</version>\n              </path>\n              <!-- other annotation processors -->\n            </annotationProcessorPaths>\n          </configuration>\n        </plugin>\n      </plugins>\n    </pluginManagement>\n  </build>    \n```\n\n\n\n### 4. MapStruct自定义配置\n\n#### 4.1 定义映射\n\n##### 4.1.1 基本映射\n\n属性名不同时 指定source和target进行映射\n\n```java\n@Mapper\npublic interface CarMapper {\n\n    @Mapping(source = \"make\", target = \"manufacturer\")\n    @Mapping(source = \"numberOfSeats\", target = \"seatCount\")\n    CarDto carToCarDto(Car car);\n\n    @Mapping(source = \"name\", target = \"fullName\")\n    PersonDto personToPersonDto(Person person);\n}\n```\n\n##### 4.1.2 添加自定义方法\n\n需要手动实现的特定映射 由MapStruct自动调用\n\n```java\n@Mapper\npublic interface CarMapper {\n\n    @Mapping(...)\n    ...\n    CarDto carToCarDto(Car car);\n\n    default PersonDto personToPersonDto(Person person) {\n        //hand-written mapping logic\n    }\n}\n```\n\n##### 4.1.3 多个数据源的映射\n\n将多个实体组合成一个数据传输对象\n\n```java\n@Mapper\npublic interface AddressMapper {\n\n    @Mapping(source = \"person.description\", target = \"description\")\n    @Mapping(source = \"address.houseNo\", target = \"houseNumber\")\n    DeliveryAddressDto personAndAddressToDeliveryAddressDto(Person person, Address address);\n}\n```\n\n##### 4.1.4 更新现有的实体\n\n使用@MappingTarget\n\n```java\n@Mapper\npublic interface CarMapper {\n\n    void updateCarFromDto(CarDto carDto, @MappingTarget Car car);\n}\n```\n\n##### 4.1.5 使用构建器\n\n可结合lombok的@Builder构建\n\n```java\npublic class PersonMapperImpl implements PersonMapper {\n\n    public Person map(PersonDto dto) {\n        if (dto == null) {\n            return null;\n        }\n\n        Person.Builder builder = Person.builder();\n\n        builder.name( dto.getName() );\n\n        return builder.create();\n    }\n}\n```\n\n\n\n#### 4.2 检索映射器\n\n##### 4.2.1 使用Mappers工厂\n\n```java\nCarMapper INSTANCE = Mappers.getMapper( CarMapper.class );\n```\n\n##### 4.2.2 使用依赖注入\n\nSpring\n\n```java\n@Mapper(componentModel = \"spring\")\npublic interface CarMapper {\n\n    CarDto carToCarDto(Car car);\n}\n```\n\n```java\n...\n@Autowired \nprivate CarMapper mapper;\n...\n```\n\n\n\n#### 4.3 数据类型转换\n\n##### 4.3.1隐式类型转换\n\n对于大多数基本类型或者包装类型之间的互转 MapStruct会自动处理类型转换\n\n再转换时也可以通过@Mapper中的属性指定格式化\n\n示例：\n\n```java\n@Mapper\npublic interface CarMapper {\n\n    @Mapping(source = \"price\", numberFormat = \"#.00\")\n    CarDto carToCarDto(Car car);\n\n    @IterableMapping(numberFormat = \"#.00\")\n    List<String> prices(List<Integer> prices);\n}\n```\n\n##### 4.3.2映射对象引用\n\n```java\n@Mapper\npublic interface CarMapper {\n\n    CarDto carToCarDto(Car car);\n\n    PersonDto personToPersonDto(Person person);\n}\n```\n\n\n\n#### 4.4 映射集合\n\n##### 4.4.1 Collection类型\n\n```java\n@Mapper\npublic interface CarMapper {\n\n    Set<String> integerSetToStringSet(Set<Integer> integers);\n\n    List<CarDto> carsToCarDtos(List<Car> cars);\n\n    CarDto carToCarDto(Car car);\n}\n```\n\n##### 4.4.2 Map类型\n\n```java\npublic interface SourceTargetMapper {\n\n    @MapMapping(valueDateFormat = \"dd.MM.yyyy\")\n    Map<String, String> longDateMapToStringStringMap(Map<Long, Date> source);\n}\n```\n\nImpl\n\n```java\n@Override\npublic Map<Long, Date> stringStringMapToLongDateMap(Map<String, String> source) {\n    if ( source == null ) {\n        return null;\n    }\n\n    Map<Long, Date> map = new HashMap<Long, Date>();\n\n    for ( Map.Entry<String, String> entry : source.entrySet() ) {\n\n        Long key = Long.parseLong( entry.getKey() );\n        Date value;\n        try {\n            value = new SimpleDateFormat( \"dd.MM.yyyy\" ).parse( entry.getValue() );\n        }\n        catch( ParseException e ) {\n            throw new RuntimeException( e );\n        }\n\n        map.put( key, value );\n    }\n\n    return map;\n}\n```\n\n\n\n#### 4.5 映射Stream\n\n```java\n@Mapper\npublic interface CarMapper {\n\n    Set<String> integerStreamToStringSet(Stream<Integer> integers);\n\n    List<CarDto> carsToCarDtos(Stream<Car> cars);\n\n    CarDto carToCarDto(Car car);\n}\n```\n\nImpl\n\n```java\n@Override\npublic Set<String> integerStreamToStringSet(Stream<Integer> integers) {\n    if ( integers == null ) {\n        return null;\n    }\n\n    return integers.stream().map( integer -> String.valueOf( integer ) )\n        .collect( Collectors.toCollection( HashSet<String>::new ) );\n}\n\n@Override\npublic List<CarDto> carsToCarDtos(Stream<Car> cars) {\n    if ( cars == null ) {\n        return null;\n    }\n\n    return integers.stream().map( car -> carToCarDto( car ) )\n        .collect( Collectors.toCollection( ArrayList<CarDto>::new ) );\n}\n```\n\n\n\n#### 4.6 映射配置重用\n\n##### 4.6.1 映射配置继承\n\n@InheritConfiguration\n\n```java\n@Mapper\npublic interface CarMapper {\n\n    @Mapping(target = \"numberOfSeats\", source = \"seatCount\")\n    Car carDtoToCar(CarDto car);\n\n    @InheritConfiguration\n    void carDtoIntoCar(CarDto carDto, @MappingTarget Car car);\n}\n```\n\n##### 4.6.2 逆映射\n\n@InheritInverseConfiguration\n\n```java\n@Mapper\npublic interface CarMapper {\n\n    @Mapping(source = \"numberOfSeats\", target = \"seatCount\")\n    CarDto carToDto(Car car);\n\n    @InheritInverseConfiguration\n    @Mapping(target = \"numberOfSeats\", ignore = true)\n    Car carDtoToCar(CarDto carDto);\n}\n```\n\n#### 4.7Demo\n\nModel\n\n```java\n@Data\n@Builder\npublic class User {\n    private Long id;\n    private String username;\n    private String password; // 密码\n    private Integer sex;  // 性别\n    private LocalDate birthday; // 生日\n    private LocalDateTime createTime; // 创建时间\n    private String config; // 其他扩展信息，以JSON格式存储\n}\n```\n\nDTO\n\n- 不显示密码；\n- 将日期转换；\n- config要转成对象的list；\n\n```java\n@Data\n@Builder\npublic class UserVo {\n    private Long id;\n    private String username;\n    private String password;\n    private Integer gender;\n    private LocalDate birthday;\n    private String createTime;\n    private List<UserConfig> config;\n    @Data\n    @Builder\n    public static class UserConfig {\n        private String field1;\n        private Integer field2;\n    }\n}\n```\n\nConverter\n\n```java\n@Mapper\npublic interface UserConverter {\n    UserConverter INSTANCE = Mappers.getMapper(UserConverter.class);\n\n    /**\n      * sex字段映射到gender字段\n      * createTime字段格式化\n      */\n    @Mapping(target = \"gender\", source = \"sex\")\n    @Mapping(target = \"createTime\", dateFormat = \"yyyy-MM-dd HH:mm:ss\")\n    UserVo toVo(User var1);\n\n    /**\n     * gender字段映射到sex字段\n     * createTime字段格式化\n     */\n    @Mapping(target = \"sex\", source = \"gender\")\n    //@InheritInverseConfiguration\n    @Mapping(target = \"password\", ignore = true)\n    @Mapping(target = \"createTime\", dateFormat = \"yyyy-MM-dd HH:mm:ss\")\n    User toModel(UserVo var1);\n\n    /**\n      * 集合映射\n      */\n    List<UserVo> toVoList(List<User> userList);\n\n    /**\n      * config字段自定义映射\n      */\n    default List<UserVo.UserConfig> strConfigToListUserConfig(String config) {\n        return JSON.parseArray(config, UserVo.UserConfig.class);\n    }\n    \n    /**\n      * UserConfig对象集合自定义集合\n      */\n    default String listUserConfigToStrConfig(List<UserVo.UserConfig> list) {\n        return JSON.toJSONString(list);\n    }\n    \n}\n```\n\nConverterImpl\n\n```java\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2021-07-11T15:07:54+0800\",\n    comments = \"version: 1.4.2.Final, compiler: javac, environment: Java 1.8.0_171 (Oracle Corporation)\"\n)\npublic class UserConverterImpl implements UserConverter {\n\n    @Override\n    public UserVo toVo(User var1) {\n        if ( var1 == null ) {\n            return null;\n        }\n\n        UserVoBuilder userVo = UserVo.builder();\n\n        userVo.gender( var1.getSex() );\n        if ( var1.getCreateTime() != null ) {\n            userVo.createTime( DateTimeFormatter.ofPattern( \"yyyy-MM-dd HH:mm:ss\" ).format( var1.getCreateTime() ) );\n        }\n        userVo.id( var1.getId() );\n        userVo.username( var1.getUsername() );\n        userVo.password( var1.getPassword() );\n        userVo.birthday( var1.getBirthday() );\n        userVo.config( strConfigToListUserConfig( var1.getConfig() ) );\n\n        return userVo.build();\n    }\n\n    @Override\n    public User toModel(UserVo var1) {\n        if ( var1 == null ) {\n            return null;\n        }\n\n        UserBuilder user = User.builder();\n\n        user.sex( var1.getGender() );\n        if ( var1.getCreateTime() != null ) {\n            user.createTime( LocalDateTime.parse( var1.getCreateTime(), DateTimeFormatter.ofPattern( \"yyyy-MM-dd HH:mm:ss\" ) ) );\n        }\n        user.id( var1.getId() );\n        user.username( var1.getUsername() );\n        user.birthday( var1.getBirthday() );\n        user.config( listUserConfigToStrConfig( var1.getConfig() ) );\n\n        return user.build();\n    }\n\n    @Override\n    public List<UserVo> toVoList(List<User> userList) {\n        if ( userList == null ) {\n            return null;\n        }\n\n        List<UserVo> list = new ArrayList<UserVo>( userList.size() );\n        for ( User user : userList ) {\n            list.add( toVo( user ) );\n        }\n\n        return list;\n    }\n```\n\nTest\n\n```java\npublic class AppTest {\n    @Test\n    public void toVoTest() {\n        User user = User.builder()\n                .id(1L)\n                .username(\"zhangsan\")\n                .sex(1)\n                .password(\"abc123\")\n                .createTime(LocalDateTime.now())\n                .birthday(LocalDate.of(1999, 9, 27))\n                .config(\"[{\\\"field1\\\":\\\"Test Field1\\\",\\\"field2\\\":500},{\\\"field1\\\":\\\"Test Field2\\\",\\\"field2\\\":1000}]\")\n                .build();\n        UserVo userVo = UserConverter.INSTANCE.toVo(user);\n\n        System.out.println(user);\n        System.out.println(userVo);\n\n//        User(id=1, username=zhangsan, password=abc123, sex=1, birthday=1999-09-27, createTime=2021-07-11T15:09:47.485, config=[{\"field1\":\"Test Field1\",\"field2\":500},{\"field1\":\"Test Field2\",\"field2\":1000}])\n//        UserVo(id=1, username=zhangsan, password=abc123, gender=1, birthday=1999-09-27, createTime=2021-07-11 15:09:47, config=[UserVo.UserConfig(field1=Test Field1, field2=500), UserVo.UserConfig(field1=Test Field2, field2=1000)])\n\n    }\n\n    @Test\n    public void toModelTest() {\n        ArrayList<UserVo.UserConfig> configs = new ArrayList<>();\n        configs.add(UserVo.UserConfig.builder().field1(\"Test Field1\").field2(500).build());\n        configs.add(UserVo.UserConfig.builder().field1(\"Test Field2\").field2(1000).build());\n\n        UserVo userVo = UserVo.builder()\n                .id(1L)\n                .username(\"zhangsan\")\n                .gender(2)\n                .password(\"abc123\")\n                .createTime(\"2020-01-18 15:32:54\")\n                .birthday(LocalDate.of(1999, 9, 27))\n                .config(configs)\n                .build();\n\n        User user = UserConverter.INSTANCE.toModel(userVo);\n\n        System.out.println(userVo);\n        System.out.println(user);\n\n//        User(id=1, username=zhangsan, password=null, sex=2, birthday=1999-09-27, createTime=2020-01-18T15:32:54, config=[{\"field1\":\"Test Field1\",\"field2\":500},{\"field1\":\"Test Field2\",\"field2\":1000}])\n//        UserVo(id=1, username=zhangsan, password=abc123, gender=2, birthday=1999-09-27, createTime=2020-01-18 15:32:54, config=[UserVo.UserConfig(field1=Test Field1, field2=500), UserVo.UserConfig(field1=Test Field2, field2=1000)])\n\n    }\n```\n\n\n\n### 5. 常用注解总结\n\n#### @Mapper(componentModel = \"spring\")\n\n 该接口作为映射接口，编译时MapStruct处理器的入口\n\n```java\n...\n@Autowired\nprivate IConverter converter\n...\n```\n\n#### @Mappings\n\n一组映射关系，值为一个数组，元素为@Mapping\n\n```java\n@Mappings{\n    @Mapping(..)\n    ..\n}\n```\n\n#### @Mapping\n\n一对映射关系 包含多个属性 支持多数据源进行映射\n\n```java\n@Mapping(source=\"\", target=\"\")\n```\n\n- source：源属性\n\n- target：目标属性\n\n- dateFormat：日期类型与String类型互转（支持Date、LocalDate、LocalDateTime）\n\n  ```java\n  @Mapping(target = \"createTime\", dateFormat = \"yyyy-MM-dd HH:mm:ss\")\n  ```\n\n- numberFormat：数值类型与String类型之间的转化\n\n  ```java\n  @Mapping(target = \"price\", numberFormat = \"#.0\")\n  ```\n\n- ignore：忽略某个属性的赋值\n\n- defaultValue：默认值\n\n#### @MappingTarget\n\n用在方法参数的前面。使用此注解，源对象同时也会作为目标对象，用于更新。\n\n#### @InheritConfiguration\n\n继承同向映射 解决重复映射\n\n#### @InheritInverseConfiguration\n\n逆向继承映射 \n","source":"_posts/mapStruct简介.md","raw":"\n\n### 1、mapStruct简介\n\n- 官网：[MapStruct – Java bean mappings, the easy way!](https://mapstruct.org/)\n- 中文文档：[MapStruct 1.3.0.Final参考指南 (kailing.pub)](http://www.kailing.pub/MapStruct1.3/index.html)\n- 使用场景：\n\n![image-20210620163904556](https://pic-markdown.oss-cn-beijing.aliyuncs.com/Java%E7%AC%94%E8%AE%B0/img/20210620163904.png)\n\n### 2、BeansUtils和MapStruct的对比\n\n#### 2.1 相同之处\n\n- 拷贝简单对象的时候都是深拷贝\n- 拷贝复杂对象的时候都是浅拷贝\n\n\n\n>复杂对象：类中属性包括对象属性的类为复杂对象\n\n> 深拷贝：是增加了一个指针并且申请了一个新的内存，使这个增加的指针指向这个新的内存\n>\n> 浅拷贝：只是增加了一个指针指向已存在的内存地址\n\n\n\n#### 2.2 不同之处\n\n- BeanUtils在java虚拟机运行期间通过反射实现，效率低下\n- BeanUtils的属性拷贝在判断空值和不同类型的属性时有很多障碍 产生Bug\n- MapStruct基于JSR269 API实现，在代码编译期间通过getter/setter来实现 对代码运行效率没有性能上的损耗 \n- MapStruct有非常灵活的策略和转化方式，自定义性比较强。\n- MapStruct支持不同的source和target基本类型自动转换，包括在超类型上声明的属性\n- 支持lombok中的model的builder链式调用 应用到ConverterImpl中\n\n>JSR269：插入式注解处理API 是用于处理注解（元数据，[JSR175](https://www.jcp.org/en/jsr/detail?id=269)）的一套API。其API位于`javax.annotation.processing`和`javax.lang.model`包下。\n>\n>插入式注解处理API可以让你在编译期访问注解元数据，处理和自定义你的编译输出，像反射一样访问类、字段、方法和注解等元素，创建新的源文件等等。可用于减少编写配置文件的劳动量，提高代码可读性等等。\n\n\n\n### 3. MapStruct的简单使用\n\n#### 3.1 依赖\n\n```xml\n...\n<properties>\n    <org.mapstruct.version>1.4.2.Final</org.mapstruct.version>\n</properties>\n...\n<dependencies>\n    <dependency>\n        <groupId>org.mapstruct</groupId>\n        <artifactId>mapstruct</artifactId>\n        <version>${org.mapstruct.version}</version>\n    </dependency>\n</dependencies>\n...\n<build>\n    <pluginManagement>\n      <plugins>\n        <plugin>\n          <artifactId>maven-compiler-plugin</artifactId>\n          <version>3.8.1</version>\n          <configuration>\n            <source>1.8</source> <!-- depending on your project -->\n            <target>1.8</target> <!-- depending on your project -->\n            <annotationProcessorPaths>\n              <path>\n                <groupId>org.mapstruct</groupId>\n                <artifactId>mapstruct-processor</artifactId>\n                <version>1.4.2.Final</version>\n              </path>\n              <path>\n                  <groupId>org.projectlombok</groupId>\n                  <artifactId>lombok</artifactId>\n                  <version>1.18.12</version>\n              </path>\n              <!-- other annotation processors -->\n            </annotationProcessorPaths>\n          </configuration>\n        </plugin>\n      </plugins>\n    </pluginManagement>\n  </build>    \n```\n\n\n\n### 4. MapStruct自定义配置\n\n#### 4.1 定义映射\n\n##### 4.1.1 基本映射\n\n属性名不同时 指定source和target进行映射\n\n```java\n@Mapper\npublic interface CarMapper {\n\n    @Mapping(source = \"make\", target = \"manufacturer\")\n    @Mapping(source = \"numberOfSeats\", target = \"seatCount\")\n    CarDto carToCarDto(Car car);\n\n    @Mapping(source = \"name\", target = \"fullName\")\n    PersonDto personToPersonDto(Person person);\n}\n```\n\n##### 4.1.2 添加自定义方法\n\n需要手动实现的特定映射 由MapStruct自动调用\n\n```java\n@Mapper\npublic interface CarMapper {\n\n    @Mapping(...)\n    ...\n    CarDto carToCarDto(Car car);\n\n    default PersonDto personToPersonDto(Person person) {\n        //hand-written mapping logic\n    }\n}\n```\n\n##### 4.1.3 多个数据源的映射\n\n将多个实体组合成一个数据传输对象\n\n```java\n@Mapper\npublic interface AddressMapper {\n\n    @Mapping(source = \"person.description\", target = \"description\")\n    @Mapping(source = \"address.houseNo\", target = \"houseNumber\")\n    DeliveryAddressDto personAndAddressToDeliveryAddressDto(Person person, Address address);\n}\n```\n\n##### 4.1.4 更新现有的实体\n\n使用@MappingTarget\n\n```java\n@Mapper\npublic interface CarMapper {\n\n    void updateCarFromDto(CarDto carDto, @MappingTarget Car car);\n}\n```\n\n##### 4.1.5 使用构建器\n\n可结合lombok的@Builder构建\n\n```java\npublic class PersonMapperImpl implements PersonMapper {\n\n    public Person map(PersonDto dto) {\n        if (dto == null) {\n            return null;\n        }\n\n        Person.Builder builder = Person.builder();\n\n        builder.name( dto.getName() );\n\n        return builder.create();\n    }\n}\n```\n\n\n\n#### 4.2 检索映射器\n\n##### 4.2.1 使用Mappers工厂\n\n```java\nCarMapper INSTANCE = Mappers.getMapper( CarMapper.class );\n```\n\n##### 4.2.2 使用依赖注入\n\nSpring\n\n```java\n@Mapper(componentModel = \"spring\")\npublic interface CarMapper {\n\n    CarDto carToCarDto(Car car);\n}\n```\n\n```java\n...\n@Autowired \nprivate CarMapper mapper;\n...\n```\n\n\n\n#### 4.3 数据类型转换\n\n##### 4.3.1隐式类型转换\n\n对于大多数基本类型或者包装类型之间的互转 MapStruct会自动处理类型转换\n\n再转换时也可以通过@Mapper中的属性指定格式化\n\n示例：\n\n```java\n@Mapper\npublic interface CarMapper {\n\n    @Mapping(source = \"price\", numberFormat = \"#.00\")\n    CarDto carToCarDto(Car car);\n\n    @IterableMapping(numberFormat = \"#.00\")\n    List<String> prices(List<Integer> prices);\n}\n```\n\n##### 4.3.2映射对象引用\n\n```java\n@Mapper\npublic interface CarMapper {\n\n    CarDto carToCarDto(Car car);\n\n    PersonDto personToPersonDto(Person person);\n}\n```\n\n\n\n#### 4.4 映射集合\n\n##### 4.4.1 Collection类型\n\n```java\n@Mapper\npublic interface CarMapper {\n\n    Set<String> integerSetToStringSet(Set<Integer> integers);\n\n    List<CarDto> carsToCarDtos(List<Car> cars);\n\n    CarDto carToCarDto(Car car);\n}\n```\n\n##### 4.4.2 Map类型\n\n```java\npublic interface SourceTargetMapper {\n\n    @MapMapping(valueDateFormat = \"dd.MM.yyyy\")\n    Map<String, String> longDateMapToStringStringMap(Map<Long, Date> source);\n}\n```\n\nImpl\n\n```java\n@Override\npublic Map<Long, Date> stringStringMapToLongDateMap(Map<String, String> source) {\n    if ( source == null ) {\n        return null;\n    }\n\n    Map<Long, Date> map = new HashMap<Long, Date>();\n\n    for ( Map.Entry<String, String> entry : source.entrySet() ) {\n\n        Long key = Long.parseLong( entry.getKey() );\n        Date value;\n        try {\n            value = new SimpleDateFormat( \"dd.MM.yyyy\" ).parse( entry.getValue() );\n        }\n        catch( ParseException e ) {\n            throw new RuntimeException( e );\n        }\n\n        map.put( key, value );\n    }\n\n    return map;\n}\n```\n\n\n\n#### 4.5 映射Stream\n\n```java\n@Mapper\npublic interface CarMapper {\n\n    Set<String> integerStreamToStringSet(Stream<Integer> integers);\n\n    List<CarDto> carsToCarDtos(Stream<Car> cars);\n\n    CarDto carToCarDto(Car car);\n}\n```\n\nImpl\n\n```java\n@Override\npublic Set<String> integerStreamToStringSet(Stream<Integer> integers) {\n    if ( integers == null ) {\n        return null;\n    }\n\n    return integers.stream().map( integer -> String.valueOf( integer ) )\n        .collect( Collectors.toCollection( HashSet<String>::new ) );\n}\n\n@Override\npublic List<CarDto> carsToCarDtos(Stream<Car> cars) {\n    if ( cars == null ) {\n        return null;\n    }\n\n    return integers.stream().map( car -> carToCarDto( car ) )\n        .collect( Collectors.toCollection( ArrayList<CarDto>::new ) );\n}\n```\n\n\n\n#### 4.6 映射配置重用\n\n##### 4.6.1 映射配置继承\n\n@InheritConfiguration\n\n```java\n@Mapper\npublic interface CarMapper {\n\n    @Mapping(target = \"numberOfSeats\", source = \"seatCount\")\n    Car carDtoToCar(CarDto car);\n\n    @InheritConfiguration\n    void carDtoIntoCar(CarDto carDto, @MappingTarget Car car);\n}\n```\n\n##### 4.6.2 逆映射\n\n@InheritInverseConfiguration\n\n```java\n@Mapper\npublic interface CarMapper {\n\n    @Mapping(source = \"numberOfSeats\", target = \"seatCount\")\n    CarDto carToDto(Car car);\n\n    @InheritInverseConfiguration\n    @Mapping(target = \"numberOfSeats\", ignore = true)\n    Car carDtoToCar(CarDto carDto);\n}\n```\n\n#### 4.7Demo\n\nModel\n\n```java\n@Data\n@Builder\npublic class User {\n    private Long id;\n    private String username;\n    private String password; // 密码\n    private Integer sex;  // 性别\n    private LocalDate birthday; // 生日\n    private LocalDateTime createTime; // 创建时间\n    private String config; // 其他扩展信息，以JSON格式存储\n}\n```\n\nDTO\n\n- 不显示密码；\n- 将日期转换；\n- config要转成对象的list；\n\n```java\n@Data\n@Builder\npublic class UserVo {\n    private Long id;\n    private String username;\n    private String password;\n    private Integer gender;\n    private LocalDate birthday;\n    private String createTime;\n    private List<UserConfig> config;\n    @Data\n    @Builder\n    public static class UserConfig {\n        private String field1;\n        private Integer field2;\n    }\n}\n```\n\nConverter\n\n```java\n@Mapper\npublic interface UserConverter {\n    UserConverter INSTANCE = Mappers.getMapper(UserConverter.class);\n\n    /**\n      * sex字段映射到gender字段\n      * createTime字段格式化\n      */\n    @Mapping(target = \"gender\", source = \"sex\")\n    @Mapping(target = \"createTime\", dateFormat = \"yyyy-MM-dd HH:mm:ss\")\n    UserVo toVo(User var1);\n\n    /**\n     * gender字段映射到sex字段\n     * createTime字段格式化\n     */\n    @Mapping(target = \"sex\", source = \"gender\")\n    //@InheritInverseConfiguration\n    @Mapping(target = \"password\", ignore = true)\n    @Mapping(target = \"createTime\", dateFormat = \"yyyy-MM-dd HH:mm:ss\")\n    User toModel(UserVo var1);\n\n    /**\n      * 集合映射\n      */\n    List<UserVo> toVoList(List<User> userList);\n\n    /**\n      * config字段自定义映射\n      */\n    default List<UserVo.UserConfig> strConfigToListUserConfig(String config) {\n        return JSON.parseArray(config, UserVo.UserConfig.class);\n    }\n    \n    /**\n      * UserConfig对象集合自定义集合\n      */\n    default String listUserConfigToStrConfig(List<UserVo.UserConfig> list) {\n        return JSON.toJSONString(list);\n    }\n    \n}\n```\n\nConverterImpl\n\n```java\n@Generated(\n    value = \"org.mapstruct.ap.MappingProcessor\",\n    date = \"2021-07-11T15:07:54+0800\",\n    comments = \"version: 1.4.2.Final, compiler: javac, environment: Java 1.8.0_171 (Oracle Corporation)\"\n)\npublic class UserConverterImpl implements UserConverter {\n\n    @Override\n    public UserVo toVo(User var1) {\n        if ( var1 == null ) {\n            return null;\n        }\n\n        UserVoBuilder userVo = UserVo.builder();\n\n        userVo.gender( var1.getSex() );\n        if ( var1.getCreateTime() != null ) {\n            userVo.createTime( DateTimeFormatter.ofPattern( \"yyyy-MM-dd HH:mm:ss\" ).format( var1.getCreateTime() ) );\n        }\n        userVo.id( var1.getId() );\n        userVo.username( var1.getUsername() );\n        userVo.password( var1.getPassword() );\n        userVo.birthday( var1.getBirthday() );\n        userVo.config( strConfigToListUserConfig( var1.getConfig() ) );\n\n        return userVo.build();\n    }\n\n    @Override\n    public User toModel(UserVo var1) {\n        if ( var1 == null ) {\n            return null;\n        }\n\n        UserBuilder user = User.builder();\n\n        user.sex( var1.getGender() );\n        if ( var1.getCreateTime() != null ) {\n            user.createTime( LocalDateTime.parse( var1.getCreateTime(), DateTimeFormatter.ofPattern( \"yyyy-MM-dd HH:mm:ss\" ) ) );\n        }\n        user.id( var1.getId() );\n        user.username( var1.getUsername() );\n        user.birthday( var1.getBirthday() );\n        user.config( listUserConfigToStrConfig( var1.getConfig() ) );\n\n        return user.build();\n    }\n\n    @Override\n    public List<UserVo> toVoList(List<User> userList) {\n        if ( userList == null ) {\n            return null;\n        }\n\n        List<UserVo> list = new ArrayList<UserVo>( userList.size() );\n        for ( User user : userList ) {\n            list.add( toVo( user ) );\n        }\n\n        return list;\n    }\n```\n\nTest\n\n```java\npublic class AppTest {\n    @Test\n    public void toVoTest() {\n        User user = User.builder()\n                .id(1L)\n                .username(\"zhangsan\")\n                .sex(1)\n                .password(\"abc123\")\n                .createTime(LocalDateTime.now())\n                .birthday(LocalDate.of(1999, 9, 27))\n                .config(\"[{\\\"field1\\\":\\\"Test Field1\\\",\\\"field2\\\":500},{\\\"field1\\\":\\\"Test Field2\\\",\\\"field2\\\":1000}]\")\n                .build();\n        UserVo userVo = UserConverter.INSTANCE.toVo(user);\n\n        System.out.println(user);\n        System.out.println(userVo);\n\n//        User(id=1, username=zhangsan, password=abc123, sex=1, birthday=1999-09-27, createTime=2021-07-11T15:09:47.485, config=[{\"field1\":\"Test Field1\",\"field2\":500},{\"field1\":\"Test Field2\",\"field2\":1000}])\n//        UserVo(id=1, username=zhangsan, password=abc123, gender=1, birthday=1999-09-27, createTime=2021-07-11 15:09:47, config=[UserVo.UserConfig(field1=Test Field1, field2=500), UserVo.UserConfig(field1=Test Field2, field2=1000)])\n\n    }\n\n    @Test\n    public void toModelTest() {\n        ArrayList<UserVo.UserConfig> configs = new ArrayList<>();\n        configs.add(UserVo.UserConfig.builder().field1(\"Test Field1\").field2(500).build());\n        configs.add(UserVo.UserConfig.builder().field1(\"Test Field2\").field2(1000).build());\n\n        UserVo userVo = UserVo.builder()\n                .id(1L)\n                .username(\"zhangsan\")\n                .gender(2)\n                .password(\"abc123\")\n                .createTime(\"2020-01-18 15:32:54\")\n                .birthday(LocalDate.of(1999, 9, 27))\n                .config(configs)\n                .build();\n\n        User user = UserConverter.INSTANCE.toModel(userVo);\n\n        System.out.println(userVo);\n        System.out.println(user);\n\n//        User(id=1, username=zhangsan, password=null, sex=2, birthday=1999-09-27, createTime=2020-01-18T15:32:54, config=[{\"field1\":\"Test Field1\",\"field2\":500},{\"field1\":\"Test Field2\",\"field2\":1000}])\n//        UserVo(id=1, username=zhangsan, password=abc123, gender=2, birthday=1999-09-27, createTime=2020-01-18 15:32:54, config=[UserVo.UserConfig(field1=Test Field1, field2=500), UserVo.UserConfig(field1=Test Field2, field2=1000)])\n\n    }\n```\n\n\n\n### 5. 常用注解总结\n\n#### @Mapper(componentModel = \"spring\")\n\n 该接口作为映射接口，编译时MapStruct处理器的入口\n\n```java\n...\n@Autowired\nprivate IConverter converter\n...\n```\n\n#### @Mappings\n\n一组映射关系，值为一个数组，元素为@Mapping\n\n```java\n@Mappings{\n    @Mapping(..)\n    ..\n}\n```\n\n#### @Mapping\n\n一对映射关系 包含多个属性 支持多数据源进行映射\n\n```java\n@Mapping(source=\"\", target=\"\")\n```\n\n- source：源属性\n\n- target：目标属性\n\n- dateFormat：日期类型与String类型互转（支持Date、LocalDate、LocalDateTime）\n\n  ```java\n  @Mapping(target = \"createTime\", dateFormat = \"yyyy-MM-dd HH:mm:ss\")\n  ```\n\n- numberFormat：数值类型与String类型之间的转化\n\n  ```java\n  @Mapping(target = \"price\", numberFormat = \"#.0\")\n  ```\n\n- ignore：忽略某个属性的赋值\n\n- defaultValue：默认值\n\n#### @MappingTarget\n\n用在方法参数的前面。使用此注解，源对象同时也会作为目标对象，用于更新。\n\n#### @InheritConfiguration\n\n继承同向映射 解决重复映射\n\n#### @InheritInverseConfiguration\n\n逆向继承映射 \n","slug":"mapStruct简介","published":1,"date":"2021-07-20T12:07:24.000Z","updated":"2021-07-20T12:07:25.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxmwv05g0000jw6hh92r0esg","content":"<h3 id=\"1、mapStruct简介\"><a href=\"#1、mapStruct简介\" class=\"headerlink\" title=\"1、mapStruct简介\"></a>1、mapStruct简介</h3><ul>\n<li>官网：<a href=\"https://mapstruct.org/\">MapStruct – Java bean mappings, the easy way!</a></li>\n<li>中文文档：<a href=\"http://www.kailing.pub/MapStruct1.3/index.html\">MapStruct 1.3.0.Final参考指南 (kailing.pub)</a></li>\n<li>使用场景：</li>\n</ul>\n<p><img src=\"https://pic-markdown.oss-cn-beijing.aliyuncs.com/Java%E7%AC%94%E8%AE%B0/img/20210620163904.png\" alt=\"image-20210620163904556\"></p>\n<h3 id=\"2、BeansUtils和MapStruct的对比\"><a href=\"#2、BeansUtils和MapStruct的对比\" class=\"headerlink\" title=\"2、BeansUtils和MapStruct的对比\"></a>2、BeansUtils和MapStruct的对比</h3><h4 id=\"2-1-相同之处\"><a href=\"#2-1-相同之处\" class=\"headerlink\" title=\"2.1 相同之处\"></a>2.1 相同之处</h4><ul>\n<li>拷贝简单对象的时候都是深拷贝</li>\n<li>拷贝复杂对象的时候都是浅拷贝</li>\n</ul>\n<blockquote>\n<p>复杂对象：类中属性包括对象属性的类为复杂对象</p>\n</blockquote>\n<blockquote>\n<p>深拷贝：是增加了一个指针并且申请了一个新的内存，使这个增加的指针指向这个新的内存</p>\n<p>浅拷贝：只是增加了一个指针指向已存在的内存地址</p>\n</blockquote>\n<h4 id=\"2-2-不同之处\"><a href=\"#2-2-不同之处\" class=\"headerlink\" title=\"2.2 不同之处\"></a>2.2 不同之处</h4><ul>\n<li>BeanUtils在java虚拟机运行期间通过反射实现，效率低下</li>\n<li>BeanUtils的属性拷贝在判断空值和不同类型的属性时有很多障碍 产生Bug</li>\n<li>MapStruct基于JSR269 API实现，在代码编译期间通过getter/setter来实现 对代码运行效率没有性能上的损耗 </li>\n<li>MapStruct有非常灵活的策略和转化方式，自定义性比较强。</li>\n<li>MapStruct支持不同的source和target基本类型自动转换，包括在超类型上声明的属性</li>\n<li>支持lombok中的model的builder链式调用 应用到ConverterImpl中</li>\n</ul>\n<blockquote>\n<p>JSR269：插入式注解处理API 是用于处理注解（元数据，<a href=\"https://www.jcp.org/en/jsr/detail?id=269\">JSR175</a>）的一套API。其API位于<code>javax.annotation.processing</code>和<code>javax.lang.model</code>包下。</p>\n<p>插入式注解处理API可以让你在编译期访问注解元数据，处理和自定义你的编译输出，像反射一样访问类、字段、方法和注解等元素，创建新的源文件等等。可用于减少编写配置文件的劳动量，提高代码可读性等等。</p>\n</blockquote>\n<h3 id=\"3-MapStruct的简单使用\"><a href=\"#3-MapStruct的简单使用\" class=\"headerlink\" title=\"3. MapStruct的简单使用\"></a>3. MapStruct的简单使用</h3><h4 id=\"3-1-依赖\"><a href=\"#3-1-依赖\" class=\"headerlink\" title=\"3.1 依赖\"></a>3.1 依赖</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">...<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">properties</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">org.mapstruct.version</span>&gt;</span>1.4.2.Final<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">org.mapstruct.version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">properties</span>&gt;</span><br>...<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.mapstruct<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mapstruct<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>$&#123;org.mapstruct.version&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span><br>...<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">build</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">pluginManagement</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugins</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.8.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">source</span>&gt;</span>1.8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">source</span>&gt;</span> <span class=\"hljs-comment\">&lt;!-- depending on your project --&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">target</span>&gt;</span>1.8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">target</span>&gt;</span> <span class=\"hljs-comment\">&lt;!-- depending on your project --&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">annotationProcessorPaths</span>&gt;</span><br>              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.mapstruct<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mapstruct-processor<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.4.2.Final<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>              <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">path</span>&gt;</span><br>              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span>&gt;</span><br>                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.projectlombok<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>lombok<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.18.12<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>              <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">path</span>&gt;</span><br>              <span class=\"hljs-comment\">&lt;!-- other annotation processors --&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">annotationProcessorPaths</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugins</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">pluginManagement</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">build</span>&gt;</span>    <br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"4-MapStruct自定义配置\"><a href=\"#4-MapStruct自定义配置\" class=\"headerlink\" title=\"4. MapStruct自定义配置\"></a>4. MapStruct自定义配置</h3><h4 id=\"4-1-定义映射\"><a href=\"#4-1-定义映射\" class=\"headerlink\" title=\"4.1 定义映射\"></a>4.1 定义映射</h4><h5 id=\"4-1-1-基本映射\"><a href=\"#4-1-1-基本映射\" class=\"headerlink\" title=\"4.1.1 基本映射\"></a>4.1.1 基本映射</h5><p>属性名不同时 指定source和target进行映射</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Mapper</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">CarMapper</span> </span>&#123;<br><br>    <span class=\"hljs-meta\">@Mapping(source = &quot;make&quot;, target = &quot;manufacturer&quot;)</span><br>    <span class=\"hljs-meta\">@Mapping(source = &quot;numberOfSeats&quot;, target = &quot;seatCount&quot;)</span><br>    <span class=\"hljs-function\">CarDto <span class=\"hljs-title\">carToCarDto</span><span class=\"hljs-params\">(Car car)</span></span>;<br><br>    <span class=\"hljs-meta\">@Mapping(source = &quot;name&quot;, target = &quot;fullName&quot;)</span><br>    <span class=\"hljs-function\">PersonDto <span class=\"hljs-title\">personToPersonDto</span><span class=\"hljs-params\">(Person person)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"4-1-2-添加自定义方法\"><a href=\"#4-1-2-添加自定义方法\" class=\"headerlink\" title=\"4.1.2 添加自定义方法\"></a>4.1.2 添加自定义方法</h5><p>需要手动实现的特定映射 由MapStruct自动调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Mapper</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">CarMapper</span> </span>&#123;<br><br>    <span class=\"hljs-meta\">@Mapping(...)</span><br>    ...<br>    <span class=\"hljs-function\">CarDto <span class=\"hljs-title\">carToCarDto</span><span class=\"hljs-params\">(Car car)</span></span>;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">default</span> PersonDto <span class=\"hljs-title\">personToPersonDto</span><span class=\"hljs-params\">(Person person)</span> </span>&#123;<br>        <span class=\"hljs-comment\">//hand-written mapping logic</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"4-1-3-多个数据源的映射\"><a href=\"#4-1-3-多个数据源的映射\" class=\"headerlink\" title=\"4.1.3 多个数据源的映射\"></a>4.1.3 多个数据源的映射</h5><p>将多个实体组合成一个数据传输对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Mapper</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">AddressMapper</span> </span>&#123;<br><br>    <span class=\"hljs-meta\">@Mapping(source = &quot;person.description&quot;, target = &quot;description&quot;)</span><br>    <span class=\"hljs-meta\">@Mapping(source = &quot;address.houseNo&quot;, target = &quot;houseNumber&quot;)</span><br>    <span class=\"hljs-function\">DeliveryAddressDto <span class=\"hljs-title\">personAndAddressToDeliveryAddressDto</span><span class=\"hljs-params\">(Person person, Address address)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"4-1-4-更新现有的实体\"><a href=\"#4-1-4-更新现有的实体\" class=\"headerlink\" title=\"4.1.4 更新现有的实体\"></a>4.1.4 更新现有的实体</h5><p>使用@MappingTarget</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Mapper</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">CarMapper</span> </span>&#123;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">updateCarFromDto</span><span class=\"hljs-params\">(CarDto carDto, <span class=\"hljs-meta\">@MappingTarget</span> Car car)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"4-1-5-使用构建器\"><a href=\"#4-1-5-使用构建器\" class=\"headerlink\" title=\"4.1.5 使用构建器\"></a>4.1.5 使用构建器</h5><p>可结合lombok的@Builder构建</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PersonMapperImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">PersonMapper</span> </span>&#123;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Person <span class=\"hljs-title\">map</span><span class=\"hljs-params\">(PersonDto dto)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (dto == <span class=\"hljs-keyword\">null</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;<br>        &#125;<br><br>        Person.Builder builder = Person.builder();<br><br>        builder.name( dto.getName() );<br><br>        <span class=\"hljs-keyword\">return</span> builder.create();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"4-2-检索映射器\"><a href=\"#4-2-检索映射器\" class=\"headerlink\" title=\"4.2 检索映射器\"></a>4.2 检索映射器</h4><h5 id=\"4-2-1-使用Mappers工厂\"><a href=\"#4-2-1-使用Mappers工厂\" class=\"headerlink\" title=\"4.2.1 使用Mappers工厂\"></a>4.2.1 使用Mappers工厂</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">CarMapper INSTANCE = Mappers.getMapper( CarMapper.class );<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"4-2-2-使用依赖注入\"><a href=\"#4-2-2-使用依赖注入\" class=\"headerlink\" title=\"4.2.2 使用依赖注入\"></a>4.2.2 使用依赖注入</h5><p>Spring</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Mapper(componentModel = &quot;spring&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">CarMapper</span> </span>&#123;<br><br>    <span class=\"hljs-function\">CarDto <span class=\"hljs-title\">carToCarDto</span><span class=\"hljs-params\">(Car car)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">...<br><span class=\"hljs-meta\">@Autowired</span> <br><span class=\"hljs-keyword\">private</span> CarMapper mapper;<br>...<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"4-3-数据类型转换\"><a href=\"#4-3-数据类型转换\" class=\"headerlink\" title=\"4.3 数据类型转换\"></a>4.3 数据类型转换</h4><h5 id=\"4-3-1隐式类型转换\"><a href=\"#4-3-1隐式类型转换\" class=\"headerlink\" title=\"4.3.1隐式类型转换\"></a>4.3.1隐式类型转换</h5><p>对于大多数基本类型或者包装类型之间的互转 MapStruct会自动处理类型转换</p>\n<p>再转换时也可以通过@Mapper中的属性指定格式化</p>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Mapper</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">CarMapper</span> </span>&#123;<br><br>    <span class=\"hljs-meta\">@Mapping(source = &quot;price&quot;, numberFormat = &quot;#.00&quot;)</span><br>    <span class=\"hljs-function\">CarDto <span class=\"hljs-title\">carToCarDto</span><span class=\"hljs-params\">(Car car)</span></span>;<br><br>    <span class=\"hljs-meta\">@IterableMapping(numberFormat = &quot;#.00&quot;)</span><br>    <span class=\"hljs-function\">List&lt;String&gt; <span class=\"hljs-title\">prices</span><span class=\"hljs-params\">(List&lt;Integer&gt; prices)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"4-3-2映射对象引用\"><a href=\"#4-3-2映射对象引用\" class=\"headerlink\" title=\"4.3.2映射对象引用\"></a>4.3.2映射对象引用</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Mapper</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">CarMapper</span> </span>&#123;<br><br>    <span class=\"hljs-function\">CarDto <span class=\"hljs-title\">carToCarDto</span><span class=\"hljs-params\">(Car car)</span></span>;<br><br>    <span class=\"hljs-function\">PersonDto <span class=\"hljs-title\">personToPersonDto</span><span class=\"hljs-params\">(Person person)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"4-4-映射集合\"><a href=\"#4-4-映射集合\" class=\"headerlink\" title=\"4.4 映射集合\"></a>4.4 映射集合</h4><h5 id=\"4-4-1-Collection类型\"><a href=\"#4-4-1-Collection类型\" class=\"headerlink\" title=\"4.4.1 Collection类型\"></a>4.4.1 Collection类型</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Mapper</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">CarMapper</span> </span>&#123;<br><br>    <span class=\"hljs-function\">Set&lt;String&gt; <span class=\"hljs-title\">integerSetToStringSet</span><span class=\"hljs-params\">(Set&lt;Integer&gt; integers)</span></span>;<br><br>    <span class=\"hljs-function\">List&lt;CarDto&gt; <span class=\"hljs-title\">carsToCarDtos</span><span class=\"hljs-params\">(List&lt;Car&gt; cars)</span></span>;<br><br>    <span class=\"hljs-function\">CarDto <span class=\"hljs-title\">carToCarDto</span><span class=\"hljs-params\">(Car car)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"4-4-2-Map类型\"><a href=\"#4-4-2-Map类型\" class=\"headerlink\" title=\"4.4.2 Map类型\"></a>4.4.2 Map类型</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">SourceTargetMapper</span> </span>&#123;<br><br>    <span class=\"hljs-meta\">@MapMapping(valueDateFormat = &quot;dd.MM.yyyy&quot;)</span><br>    <span class=\"hljs-function\">Map&lt;String, String&gt; <span class=\"hljs-title\">longDateMapToStringStringMap</span><span class=\"hljs-params\">(Map&lt;Long, Date&gt; source)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>Impl</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Map&lt;Long, Date&gt; <span class=\"hljs-title\">stringStringMapToLongDateMap</span><span class=\"hljs-params\">(Map&lt;String, String&gt; source)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> ( source == <span class=\"hljs-keyword\">null</span> ) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;<br>    &#125;<br><br>    Map&lt;Long, Date&gt; map = <span class=\"hljs-keyword\">new</span> HashMap&lt;Long, Date&gt;();<br><br>    <span class=\"hljs-keyword\">for</span> ( Map.Entry&lt;String, String&gt; entry : source.entrySet() ) &#123;<br><br>        Long key = Long.parseLong( entry.getKey() );<br>        Date value;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            value = <span class=\"hljs-keyword\">new</span> SimpleDateFormat( <span class=\"hljs-string\">&quot;dd.MM.yyyy&quot;</span> ).parse( entry.getValue() );<br>        &#125;<br>        <span class=\"hljs-keyword\">catch</span>( ParseException e ) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> RuntimeException( e );<br>        &#125;<br><br>        map.put( key, value );<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> map;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"4-5-映射Stream\"><a href=\"#4-5-映射Stream\" class=\"headerlink\" title=\"4.5 映射Stream\"></a>4.5 映射Stream</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Mapper</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">CarMapper</span> </span>&#123;<br><br>    <span class=\"hljs-function\">Set&lt;String&gt; <span class=\"hljs-title\">integerStreamToStringSet</span><span class=\"hljs-params\">(Stream&lt;Integer&gt; integers)</span></span>;<br><br>    <span class=\"hljs-function\">List&lt;CarDto&gt; <span class=\"hljs-title\">carsToCarDtos</span><span class=\"hljs-params\">(Stream&lt;Car&gt; cars)</span></span>;<br><br>    <span class=\"hljs-function\">CarDto <span class=\"hljs-title\">carToCarDto</span><span class=\"hljs-params\">(Car car)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>Impl</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Set&lt;String&gt; <span class=\"hljs-title\">integerStreamToStringSet</span><span class=\"hljs-params\">(Stream&lt;Integer&gt; integers)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> ( integers == <span class=\"hljs-keyword\">null</span> ) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> integers.stream().map( integer -&gt; String.valueOf( integer ) )<br>        .collect( Collectors.toCollection( HashSet&lt;String&gt;::<span class=\"hljs-keyword\">new</span> ) );<br>&#125;<br><br><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> List&lt;CarDto&gt; <span class=\"hljs-title\">carsToCarDtos</span><span class=\"hljs-params\">(Stream&lt;Car&gt; cars)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> ( cars == <span class=\"hljs-keyword\">null</span> ) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> integers.stream().map( car -&gt; carToCarDto( car ) )<br>        .collect( Collectors.toCollection( ArrayList&lt;CarDto&gt;::<span class=\"hljs-keyword\">new</span> ) );<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"4-6-映射配置重用\"><a href=\"#4-6-映射配置重用\" class=\"headerlink\" title=\"4.6 映射配置重用\"></a>4.6 映射配置重用</h4><h5 id=\"4-6-1-映射配置继承\"><a href=\"#4-6-1-映射配置继承\" class=\"headerlink\" title=\"4.6.1 映射配置继承\"></a>4.6.1 映射配置继承</h5><p>@InheritConfiguration</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Mapper</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">CarMapper</span> </span>&#123;<br><br>    <span class=\"hljs-meta\">@Mapping(target = &quot;numberOfSeats&quot;, source = &quot;seatCount&quot;)</span><br>    <span class=\"hljs-function\">Car <span class=\"hljs-title\">carDtoToCar</span><span class=\"hljs-params\">(CarDto car)</span></span>;<br><br>    <span class=\"hljs-meta\">@InheritConfiguration</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">carDtoIntoCar</span><span class=\"hljs-params\">(CarDto carDto, <span class=\"hljs-meta\">@MappingTarget</span> Car car)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"4-6-2-逆映射\"><a href=\"#4-6-2-逆映射\" class=\"headerlink\" title=\"4.6.2 逆映射\"></a>4.6.2 逆映射</h5><p>@InheritInverseConfiguration</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Mapper</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">CarMapper</span> </span>&#123;<br><br>    <span class=\"hljs-meta\">@Mapping(source = &quot;numberOfSeats&quot;, target = &quot;seatCount&quot;)</span><br>    <span class=\"hljs-function\">CarDto <span class=\"hljs-title\">carToDto</span><span class=\"hljs-params\">(Car car)</span></span>;<br><br>    <span class=\"hljs-meta\">@InheritInverseConfiguration</span><br>    <span class=\"hljs-meta\">@Mapping(target = &quot;numberOfSeats&quot;, ignore = true)</span><br>    <span class=\"hljs-function\">Car <span class=\"hljs-title\">carDtoToCar</span><span class=\"hljs-params\">(CarDto carDto)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"4-7Demo\"><a href=\"#4-7Demo\" class=\"headerlink\" title=\"4.7Demo\"></a>4.7Demo</h4><p>Model</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-meta\">@Builder</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span> </span>&#123;<br>    <span class=\"hljs-keyword\">private</span> Long id;<br>    <span class=\"hljs-keyword\">private</span> String username;<br>    <span class=\"hljs-keyword\">private</span> String password; <span class=\"hljs-comment\">// 密码</span><br>    <span class=\"hljs-keyword\">private</span> Integer sex;  <span class=\"hljs-comment\">// 性别</span><br>    <span class=\"hljs-keyword\">private</span> LocalDate birthday; <span class=\"hljs-comment\">// 生日</span><br>    <span class=\"hljs-keyword\">private</span> LocalDateTime createTime; <span class=\"hljs-comment\">// 创建时间</span><br>    <span class=\"hljs-keyword\">private</span> String config; <span class=\"hljs-comment\">// 其他扩展信息，以JSON格式存储</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>DTO</p>\n<ul>\n<li>不显示密码；</li>\n<li>将日期转换；</li>\n<li>config要转成对象的list；</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-meta\">@Builder</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserVo</span> </span>&#123;<br>    <span class=\"hljs-keyword\">private</span> Long id;<br>    <span class=\"hljs-keyword\">private</span> String username;<br>    <span class=\"hljs-keyword\">private</span> String password;<br>    <span class=\"hljs-keyword\">private</span> Integer gender;<br>    <span class=\"hljs-keyword\">private</span> LocalDate birthday;<br>    <span class=\"hljs-keyword\">private</span> String createTime;<br>    <span class=\"hljs-keyword\">private</span> List&lt;UserConfig&gt; config;<br>    <span class=\"hljs-meta\">@Data</span><br>    <span class=\"hljs-meta\">@Builder</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserConfig</span> </span>&#123;<br>        <span class=\"hljs-keyword\">private</span> String field1;<br>        <span class=\"hljs-keyword\">private</span> Integer field2;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>Converter</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Mapper</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">UserConverter</span> </span>&#123;<br>    UserConverter INSTANCE = Mappers.getMapper(UserConverter.class);<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">      * sex字段映射到gender字段</span><br><span class=\"hljs-comment\">      * createTime字段格式化</span><br><span class=\"hljs-comment\">      */</span><br>    <span class=\"hljs-meta\">@Mapping(target = &quot;gender&quot;, source = &quot;sex&quot;)</span><br>    <span class=\"hljs-meta\">@Mapping(target = &quot;createTime&quot;, dateFormat = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br>    <span class=\"hljs-function\">UserVo <span class=\"hljs-title\">toVo</span><span class=\"hljs-params\">(User var1)</span></span>;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * gender字段映射到sex字段</span><br><span class=\"hljs-comment\">     * createTime字段格式化</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Mapping(target = &quot;sex&quot;, source = &quot;gender&quot;)</span><br>    <span class=\"hljs-comment\">//@InheritInverseConfiguration</span><br>    <span class=\"hljs-meta\">@Mapping(target = &quot;password&quot;, ignore = true)</span><br>    <span class=\"hljs-meta\">@Mapping(target = &quot;createTime&quot;, dateFormat = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br>    <span class=\"hljs-function\">User <span class=\"hljs-title\">toModel</span><span class=\"hljs-params\">(UserVo var1)</span></span>;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">      * 集合映射</span><br><span class=\"hljs-comment\">      */</span><br>    <span class=\"hljs-function\">List&lt;UserVo&gt; <span class=\"hljs-title\">toVoList</span><span class=\"hljs-params\">(List&lt;User&gt; userList)</span></span>;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">      * config字段自定义映射</span><br><span class=\"hljs-comment\">      */</span><br>    <span class=\"hljs-keyword\">default</span> List&lt;UserVo.UserConfig&gt; strConfigToListUserConfig(String config) &#123;<br>        <span class=\"hljs-keyword\">return</span> JSON.parseArray(config, UserVo.UserConfig.class);<br>    &#125;<br>    <br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">      * UserConfig对象集合自定义集合</span><br><span class=\"hljs-comment\">      */</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">default</span> String <span class=\"hljs-title\">listUserConfigToStrConfig</span><span class=\"hljs-params\">(List&lt;UserVo.UserConfig&gt; list)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> JSON.toJSONString(list);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>ConverterImpl</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Generated(</span><br><span class=\"hljs-meta\">    value = &quot;org.mapstruct.ap.MappingProcessor&quot;,</span><br><span class=\"hljs-meta\">    date = &quot;2021-07-11T15:07:54+0800&quot;,</span><br><span class=\"hljs-meta\">    comments = &quot;version: 1.4.2.Final, compiler: javac, environment: Java 1.8.0_171 (Oracle Corporation)&quot;</span><br><span class=\"hljs-meta\">)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserConverterImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">UserConverter</span> </span>&#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> UserVo <span class=\"hljs-title\">toVo</span><span class=\"hljs-params\">(User var1)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> ( var1 == <span class=\"hljs-keyword\">null</span> ) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;<br>        &#125;<br><br>        UserVoBuilder userVo = UserVo.builder();<br><br>        userVo.gender( var1.getSex() );<br>        <span class=\"hljs-keyword\">if</span> ( var1.getCreateTime() != <span class=\"hljs-keyword\">null</span> ) &#123;<br>            userVo.createTime( DateTimeFormatter.ofPattern( <span class=\"hljs-string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span> ).format( var1.getCreateTime() ) );<br>        &#125;<br>        userVo.id( var1.getId() );<br>        userVo.username( var1.getUsername() );<br>        userVo.password( var1.getPassword() );<br>        userVo.birthday( var1.getBirthday() );<br>        userVo.config( strConfigToListUserConfig( var1.getConfig() ) );<br><br>        <span class=\"hljs-keyword\">return</span> userVo.build();<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title\">toModel</span><span class=\"hljs-params\">(UserVo var1)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> ( var1 == <span class=\"hljs-keyword\">null</span> ) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;<br>        &#125;<br><br>        UserBuilder user = User.builder();<br><br>        user.sex( var1.getGender() );<br>        <span class=\"hljs-keyword\">if</span> ( var1.getCreateTime() != <span class=\"hljs-keyword\">null</span> ) &#123;<br>            user.createTime( LocalDateTime.parse( var1.getCreateTime(), DateTimeFormatter.ofPattern( <span class=\"hljs-string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span> ) ) );<br>        &#125;<br>        user.id( var1.getId() );<br>        user.username( var1.getUsername() );<br>        user.birthday( var1.getBirthday() );<br>        user.config( listUserConfigToStrConfig( var1.getConfig() ) );<br><br>        <span class=\"hljs-keyword\">return</span> user.build();<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> List&lt;UserVo&gt; <span class=\"hljs-title\">toVoList</span><span class=\"hljs-params\">(List&lt;User&gt; userList)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> ( userList == <span class=\"hljs-keyword\">null</span> ) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;<br>        &#125;<br><br>        List&lt;UserVo&gt; list = <span class=\"hljs-keyword\">new</span> ArrayList&lt;UserVo&gt;( userList.size() );<br>        <span class=\"hljs-keyword\">for</span> ( User user : userList ) &#123;<br>            list.add( toVo( user ) );<br>        &#125;<br><br>        <span class=\"hljs-keyword\">return</span> list;<br>    &#125;<br></code></pre></td></tr></table></figure>\n\n<p>Test</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AppTest</span> </span>&#123;<br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">toVoTest</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        User user = User.builder()<br>                .id(<span class=\"hljs-number\">1L</span>)<br>                .username(<span class=\"hljs-string\">&quot;zhangsan&quot;</span>)<br>                .sex(<span class=\"hljs-number\">1</span>)<br>                .password(<span class=\"hljs-string\">&quot;abc123&quot;</span>)<br>                .createTime(LocalDateTime.now())<br>                .birthday(LocalDate.of(<span class=\"hljs-number\">1999</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">27</span>))<br>                .config(<span class=\"hljs-string\">&quot;[&#123;\\&quot;field1\\&quot;:\\&quot;Test Field1\\&quot;,\\&quot;field2\\&quot;:500&#125;,&#123;\\&quot;field1\\&quot;:\\&quot;Test Field2\\&quot;,\\&quot;field2\\&quot;:1000&#125;]&quot;</span>)<br>                .build();<br>        UserVo userVo = UserConverter.INSTANCE.toVo(user);<br><br>        System.out.println(user);<br>        System.out.println(userVo);<br><br><span class=\"hljs-comment\">//        User(id=1, username=zhangsan, password=abc123, sex=1, birthday=1999-09-27, createTime=2021-07-11T15:09:47.485, config=[&#123;&quot;field1&quot;:&quot;Test Field1&quot;,&quot;field2&quot;:500&#125;,&#123;&quot;field1&quot;:&quot;Test Field2&quot;,&quot;field2&quot;:1000&#125;])</span><br><span class=\"hljs-comment\">//        UserVo(id=1, username=zhangsan, password=abc123, gender=1, birthday=1999-09-27, createTime=2021-07-11 15:09:47, config=[UserVo.UserConfig(field1=Test Field1, field2=500), UserVo.UserConfig(field1=Test Field2, field2=1000)])</span><br><br>    &#125;<br><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">toModelTest</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        ArrayList&lt;UserVo.UserConfig&gt; configs = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();<br>        configs.add(UserVo.UserConfig.builder().field1(<span class=\"hljs-string\">&quot;Test Field1&quot;</span>).field2(<span class=\"hljs-number\">500</span>).build());<br>        configs.add(UserVo.UserConfig.builder().field1(<span class=\"hljs-string\">&quot;Test Field2&quot;</span>).field2(<span class=\"hljs-number\">1000</span>).build());<br><br>        UserVo userVo = UserVo.builder()<br>                .id(<span class=\"hljs-number\">1L</span>)<br>                .username(<span class=\"hljs-string\">&quot;zhangsan&quot;</span>)<br>                .gender(<span class=\"hljs-number\">2</span>)<br>                .password(<span class=\"hljs-string\">&quot;abc123&quot;</span>)<br>                .createTime(<span class=\"hljs-string\">&quot;2020-01-18 15:32:54&quot;</span>)<br>                .birthday(LocalDate.of(<span class=\"hljs-number\">1999</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">27</span>))<br>                .config(configs)<br>                .build();<br><br>        User user = UserConverter.INSTANCE.toModel(userVo);<br><br>        System.out.println(userVo);<br>        System.out.println(user);<br><br><span class=\"hljs-comment\">//        User(id=1, username=zhangsan, password=null, sex=2, birthday=1999-09-27, createTime=2020-01-18T15:32:54, config=[&#123;&quot;field1&quot;:&quot;Test Field1&quot;,&quot;field2&quot;:500&#125;,&#123;&quot;field1&quot;:&quot;Test Field2&quot;,&quot;field2&quot;:1000&#125;])</span><br><span class=\"hljs-comment\">//        UserVo(id=1, username=zhangsan, password=abc123, gender=2, birthday=1999-09-27, createTime=2020-01-18 15:32:54, config=[UserVo.UserConfig(field1=Test Field1, field2=500), UserVo.UserConfig(field1=Test Field2, field2=1000)])</span><br><br>    &#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"5-常用注解总结\"><a href=\"#5-常用注解总结\" class=\"headerlink\" title=\"5. 常用注解总结\"></a>5. 常用注解总结</h3><h4 id=\"Mapper-componentModel-“spring”\"><a href=\"#Mapper-componentModel-“spring”\" class=\"headerlink\" title=\"@Mapper(componentModel = “spring”)\"></a>@Mapper(componentModel = “spring”)</h4><p> 该接口作为映射接口，编译时MapStruct处理器的入口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">...<br><span class=\"hljs-meta\">@Autowired</span><br><span class=\"hljs-keyword\">private</span> IConverter converter<br>...<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"Mappings\"><a href=\"#Mappings\" class=\"headerlink\" title=\"@Mappings\"></a>@Mappings</h4><p>一组映射关系，值为一个数组，元素为@Mapping</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Mappings</span>&#123;<br>    <span class=\"hljs-meta\">@Mapping(..)</span><br>    ..<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"Mapping\"><a href=\"#Mapping\" class=\"headerlink\" title=\"@Mapping\"></a>@Mapping</h4><p>一对映射关系 包含多个属性 支持多数据源进行映射</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Mapping(source=&quot;&quot;, target=&quot;&quot;)</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p>source：源属性</p>\n</li>\n<li><p>target：目标属性</p>\n</li>\n<li><p>dateFormat：日期类型与String类型互转（支持Date、LocalDate、LocalDateTime）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Mapping(target = &quot;createTime&quot;, dateFormat = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br></code></pre></td></tr></table></figure></li>\n<li><p>numberFormat：数值类型与String类型之间的转化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Mapping(target = &quot;price&quot;, numberFormat = &quot;#.0&quot;)</span><br></code></pre></td></tr></table></figure></li>\n<li><p>ignore：忽略某个属性的赋值</p>\n</li>\n<li><p>defaultValue：默认值</p>\n</li>\n</ul>\n<h4 id=\"MappingTarget\"><a href=\"#MappingTarget\" class=\"headerlink\" title=\"@MappingTarget\"></a>@MappingTarget</h4><p>用在方法参数的前面。使用此注解，源对象同时也会作为目标对象，用于更新。</p>\n<h4 id=\"InheritConfiguration\"><a href=\"#InheritConfiguration\" class=\"headerlink\" title=\"@InheritConfiguration\"></a>@InheritConfiguration</h4><p>继承同向映射 解决重复映射</p>\n<h4 id=\"InheritInverseConfiguration\"><a href=\"#InheritInverseConfiguration\" class=\"headerlink\" title=\"@InheritInverseConfiguration\"></a>@InheritInverseConfiguration</h4><p>逆向继承映射 </p>\n","site":{"data":{}},"wordcount":12374,"excerpt":"","more":"<h3 id=\"1、mapStruct简介\"><a href=\"#1、mapStruct简介\" class=\"headerlink\" title=\"1、mapStruct简介\"></a>1、mapStruct简介</h3><ul>\n<li>官网：<a href=\"https://mapstruct.org/\">MapStruct – Java bean mappings, the easy way!</a></li>\n<li>中文文档：<a href=\"http://www.kailing.pub/MapStruct1.3/index.html\">MapStruct 1.3.0.Final参考指南 (kailing.pub)</a></li>\n<li>使用场景：</li>\n</ul>\n<p><img src=\"https://pic-markdown.oss-cn-beijing.aliyuncs.com/Java%E7%AC%94%E8%AE%B0/img/20210620163904.png\" alt=\"image-20210620163904556\"></p>\n<h3 id=\"2、BeansUtils和MapStruct的对比\"><a href=\"#2、BeansUtils和MapStruct的对比\" class=\"headerlink\" title=\"2、BeansUtils和MapStruct的对比\"></a>2、BeansUtils和MapStruct的对比</h3><h4 id=\"2-1-相同之处\"><a href=\"#2-1-相同之处\" class=\"headerlink\" title=\"2.1 相同之处\"></a>2.1 相同之处</h4><ul>\n<li>拷贝简单对象的时候都是深拷贝</li>\n<li>拷贝复杂对象的时候都是浅拷贝</li>\n</ul>\n<blockquote>\n<p>复杂对象：类中属性包括对象属性的类为复杂对象</p>\n</blockquote>\n<blockquote>\n<p>深拷贝：是增加了一个指针并且申请了一个新的内存，使这个增加的指针指向这个新的内存</p>\n<p>浅拷贝：只是增加了一个指针指向已存在的内存地址</p>\n</blockquote>\n<h4 id=\"2-2-不同之处\"><a href=\"#2-2-不同之处\" class=\"headerlink\" title=\"2.2 不同之处\"></a>2.2 不同之处</h4><ul>\n<li>BeanUtils在java虚拟机运行期间通过反射实现，效率低下</li>\n<li>BeanUtils的属性拷贝在判断空值和不同类型的属性时有很多障碍 产生Bug</li>\n<li>MapStruct基于JSR269 API实现，在代码编译期间通过getter/setter来实现 对代码运行效率没有性能上的损耗 </li>\n<li>MapStruct有非常灵活的策略和转化方式，自定义性比较强。</li>\n<li>MapStruct支持不同的source和target基本类型自动转换，包括在超类型上声明的属性</li>\n<li>支持lombok中的model的builder链式调用 应用到ConverterImpl中</li>\n</ul>\n<blockquote>\n<p>JSR269：插入式注解处理API 是用于处理注解（元数据，<a href=\"https://www.jcp.org/en/jsr/detail?id=269\">JSR175</a>）的一套API。其API位于<code>javax.annotation.processing</code>和<code>javax.lang.model</code>包下。</p>\n<p>插入式注解处理API可以让你在编译期访问注解元数据，处理和自定义你的编译输出，像反射一样访问类、字段、方法和注解等元素，创建新的源文件等等。可用于减少编写配置文件的劳动量，提高代码可读性等等。</p>\n</blockquote>\n<h3 id=\"3-MapStruct的简单使用\"><a href=\"#3-MapStruct的简单使用\" class=\"headerlink\" title=\"3. MapStruct的简单使用\"></a>3. MapStruct的简单使用</h3><h4 id=\"3-1-依赖\"><a href=\"#3-1-依赖\" class=\"headerlink\" title=\"3.1 依赖\"></a>3.1 依赖</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">...<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">properties</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">org.mapstruct.version</span>&gt;</span>1.4.2.Final<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">org.mapstruct.version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">properties</span>&gt;</span><br>...<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.mapstruct<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mapstruct<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>$&#123;org.mapstruct.version&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span><br>...<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">build</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">pluginManagement</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugins</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.8.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">source</span>&gt;</span>1.8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">source</span>&gt;</span> <span class=\"hljs-comment\">&lt;!-- depending on your project --&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">target</span>&gt;</span>1.8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">target</span>&gt;</span> <span class=\"hljs-comment\">&lt;!-- depending on your project --&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">annotationProcessorPaths</span>&gt;</span><br>              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.mapstruct<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mapstruct-processor<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.4.2.Final<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>              <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">path</span>&gt;</span><br>              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span>&gt;</span><br>                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.projectlombok<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>lombok<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.18.12<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>              <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">path</span>&gt;</span><br>              <span class=\"hljs-comment\">&lt;!-- other annotation processors --&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">annotationProcessorPaths</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugins</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">pluginManagement</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">build</span>&gt;</span>    <br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"4-MapStruct自定义配置\"><a href=\"#4-MapStruct自定义配置\" class=\"headerlink\" title=\"4. MapStruct自定义配置\"></a>4. MapStruct自定义配置</h3><h4 id=\"4-1-定义映射\"><a href=\"#4-1-定义映射\" class=\"headerlink\" title=\"4.1 定义映射\"></a>4.1 定义映射</h4><h5 id=\"4-1-1-基本映射\"><a href=\"#4-1-1-基本映射\" class=\"headerlink\" title=\"4.1.1 基本映射\"></a>4.1.1 基本映射</h5><p>属性名不同时 指定source和target进行映射</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Mapper</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">CarMapper</span> </span>&#123;<br><br>    <span class=\"hljs-meta\">@Mapping(source = &quot;make&quot;, target = &quot;manufacturer&quot;)</span><br>    <span class=\"hljs-meta\">@Mapping(source = &quot;numberOfSeats&quot;, target = &quot;seatCount&quot;)</span><br>    <span class=\"hljs-function\">CarDto <span class=\"hljs-title\">carToCarDto</span><span class=\"hljs-params\">(Car car)</span></span>;<br><br>    <span class=\"hljs-meta\">@Mapping(source = &quot;name&quot;, target = &quot;fullName&quot;)</span><br>    <span class=\"hljs-function\">PersonDto <span class=\"hljs-title\">personToPersonDto</span><span class=\"hljs-params\">(Person person)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"4-1-2-添加自定义方法\"><a href=\"#4-1-2-添加自定义方法\" class=\"headerlink\" title=\"4.1.2 添加自定义方法\"></a>4.1.2 添加自定义方法</h5><p>需要手动实现的特定映射 由MapStruct自动调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Mapper</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">CarMapper</span> </span>&#123;<br><br>    <span class=\"hljs-meta\">@Mapping(...)</span><br>    ...<br>    <span class=\"hljs-function\">CarDto <span class=\"hljs-title\">carToCarDto</span><span class=\"hljs-params\">(Car car)</span></span>;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">default</span> PersonDto <span class=\"hljs-title\">personToPersonDto</span><span class=\"hljs-params\">(Person person)</span> </span>&#123;<br>        <span class=\"hljs-comment\">//hand-written mapping logic</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"4-1-3-多个数据源的映射\"><a href=\"#4-1-3-多个数据源的映射\" class=\"headerlink\" title=\"4.1.3 多个数据源的映射\"></a>4.1.3 多个数据源的映射</h5><p>将多个实体组合成一个数据传输对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Mapper</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">AddressMapper</span> </span>&#123;<br><br>    <span class=\"hljs-meta\">@Mapping(source = &quot;person.description&quot;, target = &quot;description&quot;)</span><br>    <span class=\"hljs-meta\">@Mapping(source = &quot;address.houseNo&quot;, target = &quot;houseNumber&quot;)</span><br>    <span class=\"hljs-function\">DeliveryAddressDto <span class=\"hljs-title\">personAndAddressToDeliveryAddressDto</span><span class=\"hljs-params\">(Person person, Address address)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"4-1-4-更新现有的实体\"><a href=\"#4-1-4-更新现有的实体\" class=\"headerlink\" title=\"4.1.4 更新现有的实体\"></a>4.1.4 更新现有的实体</h5><p>使用@MappingTarget</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Mapper</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">CarMapper</span> </span>&#123;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">updateCarFromDto</span><span class=\"hljs-params\">(CarDto carDto, <span class=\"hljs-meta\">@MappingTarget</span> Car car)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"4-1-5-使用构建器\"><a href=\"#4-1-5-使用构建器\" class=\"headerlink\" title=\"4.1.5 使用构建器\"></a>4.1.5 使用构建器</h5><p>可结合lombok的@Builder构建</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PersonMapperImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">PersonMapper</span> </span>&#123;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Person <span class=\"hljs-title\">map</span><span class=\"hljs-params\">(PersonDto dto)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (dto == <span class=\"hljs-keyword\">null</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;<br>        &#125;<br><br>        Person.Builder builder = Person.builder();<br><br>        builder.name( dto.getName() );<br><br>        <span class=\"hljs-keyword\">return</span> builder.create();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"4-2-检索映射器\"><a href=\"#4-2-检索映射器\" class=\"headerlink\" title=\"4.2 检索映射器\"></a>4.2 检索映射器</h4><h5 id=\"4-2-1-使用Mappers工厂\"><a href=\"#4-2-1-使用Mappers工厂\" class=\"headerlink\" title=\"4.2.1 使用Mappers工厂\"></a>4.2.1 使用Mappers工厂</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">CarMapper INSTANCE = Mappers.getMapper( CarMapper.class );<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"4-2-2-使用依赖注入\"><a href=\"#4-2-2-使用依赖注入\" class=\"headerlink\" title=\"4.2.2 使用依赖注入\"></a>4.2.2 使用依赖注入</h5><p>Spring</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Mapper(componentModel = &quot;spring&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">CarMapper</span> </span>&#123;<br><br>    <span class=\"hljs-function\">CarDto <span class=\"hljs-title\">carToCarDto</span><span class=\"hljs-params\">(Car car)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">...<br><span class=\"hljs-meta\">@Autowired</span> <br><span class=\"hljs-keyword\">private</span> CarMapper mapper;<br>...<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"4-3-数据类型转换\"><a href=\"#4-3-数据类型转换\" class=\"headerlink\" title=\"4.3 数据类型转换\"></a>4.3 数据类型转换</h4><h5 id=\"4-3-1隐式类型转换\"><a href=\"#4-3-1隐式类型转换\" class=\"headerlink\" title=\"4.3.1隐式类型转换\"></a>4.3.1隐式类型转换</h5><p>对于大多数基本类型或者包装类型之间的互转 MapStruct会自动处理类型转换</p>\n<p>再转换时也可以通过@Mapper中的属性指定格式化</p>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Mapper</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">CarMapper</span> </span>&#123;<br><br>    <span class=\"hljs-meta\">@Mapping(source = &quot;price&quot;, numberFormat = &quot;#.00&quot;)</span><br>    <span class=\"hljs-function\">CarDto <span class=\"hljs-title\">carToCarDto</span><span class=\"hljs-params\">(Car car)</span></span>;<br><br>    <span class=\"hljs-meta\">@IterableMapping(numberFormat = &quot;#.00&quot;)</span><br>    <span class=\"hljs-function\">List&lt;String&gt; <span class=\"hljs-title\">prices</span><span class=\"hljs-params\">(List&lt;Integer&gt; prices)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"4-3-2映射对象引用\"><a href=\"#4-3-2映射对象引用\" class=\"headerlink\" title=\"4.3.2映射对象引用\"></a>4.3.2映射对象引用</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Mapper</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">CarMapper</span> </span>&#123;<br><br>    <span class=\"hljs-function\">CarDto <span class=\"hljs-title\">carToCarDto</span><span class=\"hljs-params\">(Car car)</span></span>;<br><br>    <span class=\"hljs-function\">PersonDto <span class=\"hljs-title\">personToPersonDto</span><span class=\"hljs-params\">(Person person)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"4-4-映射集合\"><a href=\"#4-4-映射集合\" class=\"headerlink\" title=\"4.4 映射集合\"></a>4.4 映射集合</h4><h5 id=\"4-4-1-Collection类型\"><a href=\"#4-4-1-Collection类型\" class=\"headerlink\" title=\"4.4.1 Collection类型\"></a>4.4.1 Collection类型</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Mapper</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">CarMapper</span> </span>&#123;<br><br>    <span class=\"hljs-function\">Set&lt;String&gt; <span class=\"hljs-title\">integerSetToStringSet</span><span class=\"hljs-params\">(Set&lt;Integer&gt; integers)</span></span>;<br><br>    <span class=\"hljs-function\">List&lt;CarDto&gt; <span class=\"hljs-title\">carsToCarDtos</span><span class=\"hljs-params\">(List&lt;Car&gt; cars)</span></span>;<br><br>    <span class=\"hljs-function\">CarDto <span class=\"hljs-title\">carToCarDto</span><span class=\"hljs-params\">(Car car)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"4-4-2-Map类型\"><a href=\"#4-4-2-Map类型\" class=\"headerlink\" title=\"4.4.2 Map类型\"></a>4.4.2 Map类型</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">SourceTargetMapper</span> </span>&#123;<br><br>    <span class=\"hljs-meta\">@MapMapping(valueDateFormat = &quot;dd.MM.yyyy&quot;)</span><br>    <span class=\"hljs-function\">Map&lt;String, String&gt; <span class=\"hljs-title\">longDateMapToStringStringMap</span><span class=\"hljs-params\">(Map&lt;Long, Date&gt; source)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>Impl</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Map&lt;Long, Date&gt; <span class=\"hljs-title\">stringStringMapToLongDateMap</span><span class=\"hljs-params\">(Map&lt;String, String&gt; source)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> ( source == <span class=\"hljs-keyword\">null</span> ) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;<br>    &#125;<br><br>    Map&lt;Long, Date&gt; map = <span class=\"hljs-keyword\">new</span> HashMap&lt;Long, Date&gt;();<br><br>    <span class=\"hljs-keyword\">for</span> ( Map.Entry&lt;String, String&gt; entry : source.entrySet() ) &#123;<br><br>        Long key = Long.parseLong( entry.getKey() );<br>        Date value;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            value = <span class=\"hljs-keyword\">new</span> SimpleDateFormat( <span class=\"hljs-string\">&quot;dd.MM.yyyy&quot;</span> ).parse( entry.getValue() );<br>        &#125;<br>        <span class=\"hljs-keyword\">catch</span>( ParseException e ) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> RuntimeException( e );<br>        &#125;<br><br>        map.put( key, value );<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> map;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"4-5-映射Stream\"><a href=\"#4-5-映射Stream\" class=\"headerlink\" title=\"4.5 映射Stream\"></a>4.5 映射Stream</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Mapper</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">CarMapper</span> </span>&#123;<br><br>    <span class=\"hljs-function\">Set&lt;String&gt; <span class=\"hljs-title\">integerStreamToStringSet</span><span class=\"hljs-params\">(Stream&lt;Integer&gt; integers)</span></span>;<br><br>    <span class=\"hljs-function\">List&lt;CarDto&gt; <span class=\"hljs-title\">carsToCarDtos</span><span class=\"hljs-params\">(Stream&lt;Car&gt; cars)</span></span>;<br><br>    <span class=\"hljs-function\">CarDto <span class=\"hljs-title\">carToCarDto</span><span class=\"hljs-params\">(Car car)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>Impl</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Set&lt;String&gt; <span class=\"hljs-title\">integerStreamToStringSet</span><span class=\"hljs-params\">(Stream&lt;Integer&gt; integers)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> ( integers == <span class=\"hljs-keyword\">null</span> ) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> integers.stream().map( integer -&gt; String.valueOf( integer ) )<br>        .collect( Collectors.toCollection( HashSet&lt;String&gt;::<span class=\"hljs-keyword\">new</span> ) );<br>&#125;<br><br><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> List&lt;CarDto&gt; <span class=\"hljs-title\">carsToCarDtos</span><span class=\"hljs-params\">(Stream&lt;Car&gt; cars)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> ( cars == <span class=\"hljs-keyword\">null</span> ) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> integers.stream().map( car -&gt; carToCarDto( car ) )<br>        .collect( Collectors.toCollection( ArrayList&lt;CarDto&gt;::<span class=\"hljs-keyword\">new</span> ) );<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"4-6-映射配置重用\"><a href=\"#4-6-映射配置重用\" class=\"headerlink\" title=\"4.6 映射配置重用\"></a>4.6 映射配置重用</h4><h5 id=\"4-6-1-映射配置继承\"><a href=\"#4-6-1-映射配置继承\" class=\"headerlink\" title=\"4.6.1 映射配置继承\"></a>4.6.1 映射配置继承</h5><p>@InheritConfiguration</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Mapper</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">CarMapper</span> </span>&#123;<br><br>    <span class=\"hljs-meta\">@Mapping(target = &quot;numberOfSeats&quot;, source = &quot;seatCount&quot;)</span><br>    <span class=\"hljs-function\">Car <span class=\"hljs-title\">carDtoToCar</span><span class=\"hljs-params\">(CarDto car)</span></span>;<br><br>    <span class=\"hljs-meta\">@InheritConfiguration</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">carDtoIntoCar</span><span class=\"hljs-params\">(CarDto carDto, <span class=\"hljs-meta\">@MappingTarget</span> Car car)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"4-6-2-逆映射\"><a href=\"#4-6-2-逆映射\" class=\"headerlink\" title=\"4.6.2 逆映射\"></a>4.6.2 逆映射</h5><p>@InheritInverseConfiguration</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Mapper</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">CarMapper</span> </span>&#123;<br><br>    <span class=\"hljs-meta\">@Mapping(source = &quot;numberOfSeats&quot;, target = &quot;seatCount&quot;)</span><br>    <span class=\"hljs-function\">CarDto <span class=\"hljs-title\">carToDto</span><span class=\"hljs-params\">(Car car)</span></span>;<br><br>    <span class=\"hljs-meta\">@InheritInverseConfiguration</span><br>    <span class=\"hljs-meta\">@Mapping(target = &quot;numberOfSeats&quot;, ignore = true)</span><br>    <span class=\"hljs-function\">Car <span class=\"hljs-title\">carDtoToCar</span><span class=\"hljs-params\">(CarDto carDto)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"4-7Demo\"><a href=\"#4-7Demo\" class=\"headerlink\" title=\"4.7Demo\"></a>4.7Demo</h4><p>Model</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-meta\">@Builder</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span> </span>&#123;<br>    <span class=\"hljs-keyword\">private</span> Long id;<br>    <span class=\"hljs-keyword\">private</span> String username;<br>    <span class=\"hljs-keyword\">private</span> String password; <span class=\"hljs-comment\">// 密码</span><br>    <span class=\"hljs-keyword\">private</span> Integer sex;  <span class=\"hljs-comment\">// 性别</span><br>    <span class=\"hljs-keyword\">private</span> LocalDate birthday; <span class=\"hljs-comment\">// 生日</span><br>    <span class=\"hljs-keyword\">private</span> LocalDateTime createTime; <span class=\"hljs-comment\">// 创建时间</span><br>    <span class=\"hljs-keyword\">private</span> String config; <span class=\"hljs-comment\">// 其他扩展信息，以JSON格式存储</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>DTO</p>\n<ul>\n<li>不显示密码；</li>\n<li>将日期转换；</li>\n<li>config要转成对象的list；</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-meta\">@Builder</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserVo</span> </span>&#123;<br>    <span class=\"hljs-keyword\">private</span> Long id;<br>    <span class=\"hljs-keyword\">private</span> String username;<br>    <span class=\"hljs-keyword\">private</span> String password;<br>    <span class=\"hljs-keyword\">private</span> Integer gender;<br>    <span class=\"hljs-keyword\">private</span> LocalDate birthday;<br>    <span class=\"hljs-keyword\">private</span> String createTime;<br>    <span class=\"hljs-keyword\">private</span> List&lt;UserConfig&gt; config;<br>    <span class=\"hljs-meta\">@Data</span><br>    <span class=\"hljs-meta\">@Builder</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserConfig</span> </span>&#123;<br>        <span class=\"hljs-keyword\">private</span> String field1;<br>        <span class=\"hljs-keyword\">private</span> Integer field2;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>Converter</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Mapper</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">UserConverter</span> </span>&#123;<br>    UserConverter INSTANCE = Mappers.getMapper(UserConverter.class);<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">      * sex字段映射到gender字段</span><br><span class=\"hljs-comment\">      * createTime字段格式化</span><br><span class=\"hljs-comment\">      */</span><br>    <span class=\"hljs-meta\">@Mapping(target = &quot;gender&quot;, source = &quot;sex&quot;)</span><br>    <span class=\"hljs-meta\">@Mapping(target = &quot;createTime&quot;, dateFormat = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br>    <span class=\"hljs-function\">UserVo <span class=\"hljs-title\">toVo</span><span class=\"hljs-params\">(User var1)</span></span>;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * gender字段映射到sex字段</span><br><span class=\"hljs-comment\">     * createTime字段格式化</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Mapping(target = &quot;sex&quot;, source = &quot;gender&quot;)</span><br>    <span class=\"hljs-comment\">//@InheritInverseConfiguration</span><br>    <span class=\"hljs-meta\">@Mapping(target = &quot;password&quot;, ignore = true)</span><br>    <span class=\"hljs-meta\">@Mapping(target = &quot;createTime&quot;, dateFormat = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br>    <span class=\"hljs-function\">User <span class=\"hljs-title\">toModel</span><span class=\"hljs-params\">(UserVo var1)</span></span>;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">      * 集合映射</span><br><span class=\"hljs-comment\">      */</span><br>    <span class=\"hljs-function\">List&lt;UserVo&gt; <span class=\"hljs-title\">toVoList</span><span class=\"hljs-params\">(List&lt;User&gt; userList)</span></span>;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">      * config字段自定义映射</span><br><span class=\"hljs-comment\">      */</span><br>    <span class=\"hljs-keyword\">default</span> List&lt;UserVo.UserConfig&gt; strConfigToListUserConfig(String config) &#123;<br>        <span class=\"hljs-keyword\">return</span> JSON.parseArray(config, UserVo.UserConfig.class);<br>    &#125;<br>    <br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">      * UserConfig对象集合自定义集合</span><br><span class=\"hljs-comment\">      */</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">default</span> String <span class=\"hljs-title\">listUserConfigToStrConfig</span><span class=\"hljs-params\">(List&lt;UserVo.UserConfig&gt; list)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> JSON.toJSONString(list);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>ConverterImpl</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Generated(</span><br><span class=\"hljs-meta\">    value = &quot;org.mapstruct.ap.MappingProcessor&quot;,</span><br><span class=\"hljs-meta\">    date = &quot;2021-07-11T15:07:54+0800&quot;,</span><br><span class=\"hljs-meta\">    comments = &quot;version: 1.4.2.Final, compiler: javac, environment: Java 1.8.0_171 (Oracle Corporation)&quot;</span><br><span class=\"hljs-meta\">)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserConverterImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">UserConverter</span> </span>&#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> UserVo <span class=\"hljs-title\">toVo</span><span class=\"hljs-params\">(User var1)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> ( var1 == <span class=\"hljs-keyword\">null</span> ) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;<br>        &#125;<br><br>        UserVoBuilder userVo = UserVo.builder();<br><br>        userVo.gender( var1.getSex() );<br>        <span class=\"hljs-keyword\">if</span> ( var1.getCreateTime() != <span class=\"hljs-keyword\">null</span> ) &#123;<br>            userVo.createTime( DateTimeFormatter.ofPattern( <span class=\"hljs-string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span> ).format( var1.getCreateTime() ) );<br>        &#125;<br>        userVo.id( var1.getId() );<br>        userVo.username( var1.getUsername() );<br>        userVo.password( var1.getPassword() );<br>        userVo.birthday( var1.getBirthday() );<br>        userVo.config( strConfigToListUserConfig( var1.getConfig() ) );<br><br>        <span class=\"hljs-keyword\">return</span> userVo.build();<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title\">toModel</span><span class=\"hljs-params\">(UserVo var1)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> ( var1 == <span class=\"hljs-keyword\">null</span> ) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;<br>        &#125;<br><br>        UserBuilder user = User.builder();<br><br>        user.sex( var1.getGender() );<br>        <span class=\"hljs-keyword\">if</span> ( var1.getCreateTime() != <span class=\"hljs-keyword\">null</span> ) &#123;<br>            user.createTime( LocalDateTime.parse( var1.getCreateTime(), DateTimeFormatter.ofPattern( <span class=\"hljs-string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span> ) ) );<br>        &#125;<br>        user.id( var1.getId() );<br>        user.username( var1.getUsername() );<br>        user.birthday( var1.getBirthday() );<br>        user.config( listUserConfigToStrConfig( var1.getConfig() ) );<br><br>        <span class=\"hljs-keyword\">return</span> user.build();<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> List&lt;UserVo&gt; <span class=\"hljs-title\">toVoList</span><span class=\"hljs-params\">(List&lt;User&gt; userList)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> ( userList == <span class=\"hljs-keyword\">null</span> ) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;<br>        &#125;<br><br>        List&lt;UserVo&gt; list = <span class=\"hljs-keyword\">new</span> ArrayList&lt;UserVo&gt;( userList.size() );<br>        <span class=\"hljs-keyword\">for</span> ( User user : userList ) &#123;<br>            list.add( toVo( user ) );<br>        &#125;<br><br>        <span class=\"hljs-keyword\">return</span> list;<br>    &#125;<br></code></pre></td></tr></table></figure>\n\n<p>Test</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AppTest</span> </span>&#123;<br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">toVoTest</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        User user = User.builder()<br>                .id(<span class=\"hljs-number\">1L</span>)<br>                .username(<span class=\"hljs-string\">&quot;zhangsan&quot;</span>)<br>                .sex(<span class=\"hljs-number\">1</span>)<br>                .password(<span class=\"hljs-string\">&quot;abc123&quot;</span>)<br>                .createTime(LocalDateTime.now())<br>                .birthday(LocalDate.of(<span class=\"hljs-number\">1999</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">27</span>))<br>                .config(<span class=\"hljs-string\">&quot;[&#123;\\&quot;field1\\&quot;:\\&quot;Test Field1\\&quot;,\\&quot;field2\\&quot;:500&#125;,&#123;\\&quot;field1\\&quot;:\\&quot;Test Field2\\&quot;,\\&quot;field2\\&quot;:1000&#125;]&quot;</span>)<br>                .build();<br>        UserVo userVo = UserConverter.INSTANCE.toVo(user);<br><br>        System.out.println(user);<br>        System.out.println(userVo);<br><br><span class=\"hljs-comment\">//        User(id=1, username=zhangsan, password=abc123, sex=1, birthday=1999-09-27, createTime=2021-07-11T15:09:47.485, config=[&#123;&quot;field1&quot;:&quot;Test Field1&quot;,&quot;field2&quot;:500&#125;,&#123;&quot;field1&quot;:&quot;Test Field2&quot;,&quot;field2&quot;:1000&#125;])</span><br><span class=\"hljs-comment\">//        UserVo(id=1, username=zhangsan, password=abc123, gender=1, birthday=1999-09-27, createTime=2021-07-11 15:09:47, config=[UserVo.UserConfig(field1=Test Field1, field2=500), UserVo.UserConfig(field1=Test Field2, field2=1000)])</span><br><br>    &#125;<br><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">toModelTest</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        ArrayList&lt;UserVo.UserConfig&gt; configs = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();<br>        configs.add(UserVo.UserConfig.builder().field1(<span class=\"hljs-string\">&quot;Test Field1&quot;</span>).field2(<span class=\"hljs-number\">500</span>).build());<br>        configs.add(UserVo.UserConfig.builder().field1(<span class=\"hljs-string\">&quot;Test Field2&quot;</span>).field2(<span class=\"hljs-number\">1000</span>).build());<br><br>        UserVo userVo = UserVo.builder()<br>                .id(<span class=\"hljs-number\">1L</span>)<br>                .username(<span class=\"hljs-string\">&quot;zhangsan&quot;</span>)<br>                .gender(<span class=\"hljs-number\">2</span>)<br>                .password(<span class=\"hljs-string\">&quot;abc123&quot;</span>)<br>                .createTime(<span class=\"hljs-string\">&quot;2020-01-18 15:32:54&quot;</span>)<br>                .birthday(LocalDate.of(<span class=\"hljs-number\">1999</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">27</span>))<br>                .config(configs)<br>                .build();<br><br>        User user = UserConverter.INSTANCE.toModel(userVo);<br><br>        System.out.println(userVo);<br>        System.out.println(user);<br><br><span class=\"hljs-comment\">//        User(id=1, username=zhangsan, password=null, sex=2, birthday=1999-09-27, createTime=2020-01-18T15:32:54, config=[&#123;&quot;field1&quot;:&quot;Test Field1&quot;,&quot;field2&quot;:500&#125;,&#123;&quot;field1&quot;:&quot;Test Field2&quot;,&quot;field2&quot;:1000&#125;])</span><br><span class=\"hljs-comment\">//        UserVo(id=1, username=zhangsan, password=abc123, gender=2, birthday=1999-09-27, createTime=2020-01-18 15:32:54, config=[UserVo.UserConfig(field1=Test Field1, field2=500), UserVo.UserConfig(field1=Test Field2, field2=1000)])</span><br><br>    &#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"5-常用注解总结\"><a href=\"#5-常用注解总结\" class=\"headerlink\" title=\"5. 常用注解总结\"></a>5. 常用注解总结</h3><h4 id=\"Mapper-componentModel-“spring”\"><a href=\"#Mapper-componentModel-“spring”\" class=\"headerlink\" title=\"@Mapper(componentModel = “spring”)\"></a>@Mapper(componentModel = “spring”)</h4><p> 该接口作为映射接口，编译时MapStruct处理器的入口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">...<br><span class=\"hljs-meta\">@Autowired</span><br><span class=\"hljs-keyword\">private</span> IConverter converter<br>...<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"Mappings\"><a href=\"#Mappings\" class=\"headerlink\" title=\"@Mappings\"></a>@Mappings</h4><p>一组映射关系，值为一个数组，元素为@Mapping</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Mappings</span>&#123;<br>    <span class=\"hljs-meta\">@Mapping(..)</span><br>    ..<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"Mapping\"><a href=\"#Mapping\" class=\"headerlink\" title=\"@Mapping\"></a>@Mapping</h4><p>一对映射关系 包含多个属性 支持多数据源进行映射</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Mapping(source=&quot;&quot;, target=&quot;&quot;)</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p>source：源属性</p>\n</li>\n<li><p>target：目标属性</p>\n</li>\n<li><p>dateFormat：日期类型与String类型互转（支持Date、LocalDate、LocalDateTime）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Mapping(target = &quot;createTime&quot;, dateFormat = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br></code></pre></td></tr></table></figure></li>\n<li><p>numberFormat：数值类型与String类型之间的转化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Mapping(target = &quot;price&quot;, numberFormat = &quot;#.0&quot;)</span><br></code></pre></td></tr></table></figure></li>\n<li><p>ignore：忽略某个属性的赋值</p>\n</li>\n<li><p>defaultValue：默认值</p>\n</li>\n</ul>\n<h4 id=\"MappingTarget\"><a href=\"#MappingTarget\" class=\"headerlink\" title=\"@MappingTarget\"></a>@MappingTarget</h4><p>用在方法参数的前面。使用此注解，源对象同时也会作为目标对象，用于更新。</p>\n<h4 id=\"InheritConfiguration\"><a href=\"#InheritConfiguration\" class=\"headerlink\" title=\"@InheritConfiguration\"></a>@InheritConfiguration</h4><p>继承同向映射 解决重复映射</p>\n<h4 id=\"InheritInverseConfiguration\"><a href=\"#InheritInverseConfiguration\" class=\"headerlink\" title=\"@InheritInverseConfiguration\"></a>@InheritInverseConfiguration</h4><p>逆向继承映射 </p>\n"},{"_content":"# WebMagic的简单使用\n\n## WebMagic介绍\n\n### 1.1 WebMagic概览\n\n[toc]WebMagic是一个简单灵活的Java爬虫框架。基于WebMagic，你可以快速开发出一个高效、易维护的爬虫。\n\nWebMagic项目代码分为核心和扩展两部分。核心部分(webmagic-core)是一个精简的、模块化的爬虫实现，而扩展部分则包括一些便利的、实用性的功能。WebMagic的架构设计参照了Scrapy，目标是尽量的模块化，并体现爬虫的功能特点。\n\n这部分提供非常简单、灵活的API，在基本不改变开发模式的情况下，编写一个爬虫。\n\n扩展部分(webmagic-extension)提供一些便捷的功能，例如注解模式编写爬虫等。同时内置了一些常用的组件，便于爬虫开发。\n\n### 1.2 特性：\n\n- 简单的API，可快速上手\n- 模块化的结构，可轻松扩展\n- 提供多线程和分布式支持\n\n### 1.3 总体架构\n\nWebMagic的结构分为`Downloader`、`PageProcessor`、`Scheduler`、`Pipeline`四大组件，并由Spider将它们彼此组织起来。这四大组件对应爬虫生命周期中的下载、处理、管理和持久化等功能。WebMagic的设计参考了Scapy，但是实现方式更Java化一些。\n\n而Spider则将这几个组件组织起来，让它们可以互相交互，流程化的执行，可以认为Spider是一个大的容器，它也是WebMagic逻辑的核心。\n\n一般情况下我们只需要实现`PageProcessor`接口，自定义我们的爬虫抽取逻辑即可。\n\n### 1.3.1 WebMagic的四个组件\n\n#### 1.Downloader\n\nDownloader负责从互联网上下载页面，以便后续处理。WebMagic默认使用了[Apache HttpClient](http://hc.apache.org/index.html)作为下载工具。\n\n#### 2.PageProcessor\n\nPageProcessor负责解析页面，抽取有用信息，以及发现新的链接。WebMagic使用[Jsoup](http://jsoup.org/)作为HTML解析工具，并基于其开发了解析XPath的工具[Xsoup](https://github.com/code4craft/xsoup)。\n\n在这四个组件中，`PageProcessor`对于每个站点每个页面都不一样，是需要使用者定制的部分。\n\n#### 3.Scheduler\n\nScheduler负责管理待抓取的URL，以及一些去重的工作。WebMagic默认提供了JDK的内存队列来管理URL，并用集合来进行去重。也支持使用Redis进行分布式管理。\n\n除非项目有一些特殊的分布式需求，否则无需自己定制Scheduler。\n\n#### 4.Pipeline\n\nPipeline负责抽取结果的处理，包括计算、持久化到文件、数据库等。WebMagic默认提供了“输出到控制台”和“保存到文件”两种结果处理方案。\n\n`Pipeline`定义了结果保存的方式，如果你要保存到指定数据库，则需要编写对应的Pipeline。对于一类需求一般只需编写一个`Pipeline`。\n\n### 参考\n\n- Github地址：https://github.com/code4craft/webmagic\n- 中文文档：http://webmagic.io/docs/zh/\n\n## WebMagic的彼岸图网的DEMO\n\n### 一、打开爬取的页面进行分析\n\n#### 1.下载路径分析\n\n以此网址<http://pic.netbian.com>为默认首页，打开页面如下所示：\n\n![彼岸图网首页](https://s2.loli.net/2021/12/25/HlItCZwQBRUW8Mp.png)\n\n按`F12`打开如下页面 选中一张图片可以看到如下便签\n\n![](https://s2.loli.net/2021/12/25/GFCnrTftYoAyXLq.png)\n\n我们可以看到很鲜明的标签规律  一个`<li>标签`是一张图片 每个里面包含一个`<a>标签`和一个`<span>标签`  `<a>标签`中的href属性为图片的详情地址后缀，将其拼接在首页的网址后面即可打开当前图片的详情页面\n\n`<span>标签`中的src属性的为当前图片的缩略图地址 我们暂不考虑 4K图片才是我们要的 :smile: \n\n此页面没有4k图的下载地址 打开图片的详情页面 按下`F12` 选中下载原图 查看标签 如下\n\n![](https://s2.loli.net/2021/12/25/cTAbJPukp4tQNdF.png)\n\n点击下载原图 可以看到需要登录才可以下载 所以后续编辑代码时需要在代码模拟请求中将`Cookie信息添加到请求头`中 \n\nF12选中下载原图后可以看到这个`<a>`标签 `<a href=\"javascript:;\" data-id=\"21617\">下载原图(4000x2357)</a>` 暂时qq登录 进行一元的充值 获取长达7天的下载时间后 :mask:  我们可以看到点击下载原图就可以触发浏览器下载  在href属性中我们并没有看到对应的下载链接 打开`network`后可以看到\n\n![](https://s2.loli.net/2021/12/25/zSxgGuOw4XKakNo.png)\n\n有两条请求记录存在  看请求名字可以推算到 是图片的下载请求 分别是<http://pic.netbian.com/e/extend/downpic.php?id=21617&t=0.7504811318948537> 以及<http://pic.netbian.com/downpic.php?id=21617&classid=66>\n\n查看 第一条和第二条的响应头中的`Content-Type`可以看到\n\n![](https://s2.loli.net/2021/12/25/TFVSsMyHOGDudB8.png)\n\n![](https://s2.loli.net/2021/12/25/M8CObtXd4xJqnNZ.png)\n\n第二个请求的响应头`content-Type`类型为`image/jpg` 因此第二条请求为真正的图片下载链接\t\n\n在查看第一条请求的`Response` 我们可以看到 \n\n![](https://s2.loli.net/2021/12/25/TRgJ8eDpWZC1E2d.png)\n\n响应数据是第二条的请求的请求路径  也就是说我们需要请求第一条路径拿到返回的路径信息 再请求真正的图片下载路径  但是经测试发现第二条的请求路径格式固定 只有其中的参数`id`代表不同的图片 而且其中的第二个参数`classid` 完全不用传入 仍然可以进行下载。而参数`id`的值就是详情页的下载原图按钮中的的`<a>标签`中的`data-id属性的值` 如下\n\n![](https://s2.loli.net/2021/12/25/ajyu5NnGFMlHvJ3.png)\n\n因此我们的最终下载链接即为<http://pic.netbian.com/downpic.php?id=21617>\n\n我们的只需要通过爬虫获取`data-id`的值拼接到此路径中即可  `一定要模拟登录状态，即加入cookie信息,不然下载下来的照片大小为0 打开为损坏状态`\n\n#### 2.翻页分析\n\n首页为<http://pic.netbian.com>\n\n第二页为<http://pic.netbian.com/index_2.html>\n\n第三页为<http://pic.netbian.com/index_3.html>\n\n因此翻页的路径变化就是页码的变化 \n\n因此编写爬虫逻辑的时候需要区分首页和之后的页面 对应不同的路径\n\n### 二、代码实现\n\n#### 1.创建枚举类`SiteUrls`\n\n```java\npublic enum SiteUrls {\n\n    SITEURL(\"http://pic.netbian.com\"), // 首页网址前缀\n    PAGEURLPREFIX(\"http://pic.netbian.com/4kdongman/index_\"), // 多页网址前缀(第一页、第二页等)\n    DETAILPAGE(\"http://pic.netbian.com/tupian\"), // 当前图片详情页网址前缀\n    DOWNURL(\"http://pic.netbian.com/downpic.php?id=\"); // 图片下载地址前缀\n\n    private String url;\n\n    SiteUrls(String url) {\n        this.url = url;\n    }\n\n    public String getUrl() {\n        return this.url;\n    }\n\n}\n```\n\n#### 2.创建爬虫逻辑抽取类`PicProcesso`\n\n```java\npublic class PicProcessor implements PageProcessor {\n\n    private Site site = Site.me().setRetryTimes(3).setRetrySleepTime(1000);\n\n    @Override\n    // process是定制爬虫逻辑的核心接口，在这里编写抽取逻辑\n    public void process(Page page) {\n        if (page.getUrl().toString().startsWith(SiteUrls.DETAILPAGE.getUrl())) { // 详情页\n            // 通过css样式定位到具体所需要的信息标签 获取属性中的信息\n            String picId = page.getHtml().css(\"div.downpic a\", \"data-id\").get();\n            // 调用下载方法 传入下载路径\n            DownloadUtil.downloadPic(SiteUrls.DOWNURL.getUrl() + picId, picId);\n        } else {  // 表示列表页\n            // 拿到一个列表页中多个图片的不同图片详情网址列表\n            List<String> hrefs = page.getHtml().css(\"ul.clearfix>li>a\", \"href\").all();\n            for (String href : hrefs) {\n                // 加入任务队列\n                page.addTargetRequest(href);\n            }\n            // 获取当前列表url 进行字符串切割 获取当前页码\n            String url = page.getUrl().get();\n            String s = StringUtils.substringAfter(url,\"_\");\n            String i = StringUtils.substringBefore(s, \".\");\n            if (\"\".equals(i)) {\n                // 为空表示当前页为首页 进行第二页跳转\n                i = \"2\";\n            }else {\n                // 页码加1\n                i = (Integer.parseInt(i)+1)+\"\";\n            }\n            // 将下一页列表页加入到任务队列\n            page.addTargetRequest(SiteUrls.PAGEURLPREFIX.getUrl() + i + \".html\");\n        }\n    }\n\n    @Override\n    public Site getSite() {\n        return site;\n    }\n}\n\n```\n\n#### 3.创建图片下载工具类`DownloadUtil`\n\n```java\npublic class DownloadUtil {\n\n    public static void downloadPic(String url, String picId) {\n            FileOutputStream stream = null;\n        try {\n            RestTemplate template = new RestTemplate();\n            // 设置请求头信息 cookie和referer\n            HttpHeaders headers = new HttpHeaders();\n            headers.add(\"Cookie\",\"\");\n            headers.add(\"User-Agent\",\"\");\n            headers.add(\"Referer\",\"\");\n            HttpEntity<String> httpEntity = new HttpEntity<String>(null, headers);\n            ResponseEntity<byte[]> entity = template.exchange(url, HttpMethod.GET, httpEntity, byte[].class);\n            // 获取图片信息\n            byte[] picData = entity.getBody();\n            // 设置图片下载路径\n            stream = new FileOutputStream(new File(\"C:\\\\Users\\\\Dell\\\\Desktop\\\\图片\\\\\"+picId+\".jpg\"));\n            // 信息写入文件\n            stream.write(picData);\n            } catch (Exception e) {\n                e.printStackTrace();\n                System.out.println(\"图片下载失败\");\n            }finally {\n            try {\n                stream.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n\n    }\n\n}\n```\n\n`下载类的9、10、11空的信息请自行填写，如有帮助或者需要超级会员无限下载的账号信息请联系我`\n\n#### 4.代码启动入口类`Run`\n\n```java\npublic class Run {\n    public static void main(String[] args) {\n\t\t// 通过抽取逻辑对象创建自定义爬虫对象 添加首页网址以及设置爬取的线程数量 默认5个  \n        Spider.create(new PicProcessor()).addUrl(SiteUrls.SITEURL.getUrl())\n                .thread(5).run();\n    }\n}\n```\n\n`此文章仅供学习参考，如有问题，欢迎下方评论谢谢！！！`","source":"_posts/WebMagic的简单使用.md","raw":"# WebMagic的简单使用\n\n## WebMagic介绍\n\n### 1.1 WebMagic概览\n\n[toc]WebMagic是一个简单灵活的Java爬虫框架。基于WebMagic，你可以快速开发出一个高效、易维护的爬虫。\n\nWebMagic项目代码分为核心和扩展两部分。核心部分(webmagic-core)是一个精简的、模块化的爬虫实现，而扩展部分则包括一些便利的、实用性的功能。WebMagic的架构设计参照了Scrapy，目标是尽量的模块化，并体现爬虫的功能特点。\n\n这部分提供非常简单、灵活的API，在基本不改变开发模式的情况下，编写一个爬虫。\n\n扩展部分(webmagic-extension)提供一些便捷的功能，例如注解模式编写爬虫等。同时内置了一些常用的组件，便于爬虫开发。\n\n### 1.2 特性：\n\n- 简单的API，可快速上手\n- 模块化的结构，可轻松扩展\n- 提供多线程和分布式支持\n\n### 1.3 总体架构\n\nWebMagic的结构分为`Downloader`、`PageProcessor`、`Scheduler`、`Pipeline`四大组件，并由Spider将它们彼此组织起来。这四大组件对应爬虫生命周期中的下载、处理、管理和持久化等功能。WebMagic的设计参考了Scapy，但是实现方式更Java化一些。\n\n而Spider则将这几个组件组织起来，让它们可以互相交互，流程化的执行，可以认为Spider是一个大的容器，它也是WebMagic逻辑的核心。\n\n一般情况下我们只需要实现`PageProcessor`接口，自定义我们的爬虫抽取逻辑即可。\n\n### 1.3.1 WebMagic的四个组件\n\n#### 1.Downloader\n\nDownloader负责从互联网上下载页面，以便后续处理。WebMagic默认使用了[Apache HttpClient](http://hc.apache.org/index.html)作为下载工具。\n\n#### 2.PageProcessor\n\nPageProcessor负责解析页面，抽取有用信息，以及发现新的链接。WebMagic使用[Jsoup](http://jsoup.org/)作为HTML解析工具，并基于其开发了解析XPath的工具[Xsoup](https://github.com/code4craft/xsoup)。\n\n在这四个组件中，`PageProcessor`对于每个站点每个页面都不一样，是需要使用者定制的部分。\n\n#### 3.Scheduler\n\nScheduler负责管理待抓取的URL，以及一些去重的工作。WebMagic默认提供了JDK的内存队列来管理URL，并用集合来进行去重。也支持使用Redis进行分布式管理。\n\n除非项目有一些特殊的分布式需求，否则无需自己定制Scheduler。\n\n#### 4.Pipeline\n\nPipeline负责抽取结果的处理，包括计算、持久化到文件、数据库等。WebMagic默认提供了“输出到控制台”和“保存到文件”两种结果处理方案。\n\n`Pipeline`定义了结果保存的方式，如果你要保存到指定数据库，则需要编写对应的Pipeline。对于一类需求一般只需编写一个`Pipeline`。\n\n### 参考\n\n- Github地址：https://github.com/code4craft/webmagic\n- 中文文档：http://webmagic.io/docs/zh/\n\n## WebMagic的彼岸图网的DEMO\n\n### 一、打开爬取的页面进行分析\n\n#### 1.下载路径分析\n\n以此网址<http://pic.netbian.com>为默认首页，打开页面如下所示：\n\n![彼岸图网首页](https://s2.loli.net/2021/12/25/HlItCZwQBRUW8Mp.png)\n\n按`F12`打开如下页面 选中一张图片可以看到如下便签\n\n![](https://s2.loli.net/2021/12/25/GFCnrTftYoAyXLq.png)\n\n我们可以看到很鲜明的标签规律  一个`<li>标签`是一张图片 每个里面包含一个`<a>标签`和一个`<span>标签`  `<a>标签`中的href属性为图片的详情地址后缀，将其拼接在首页的网址后面即可打开当前图片的详情页面\n\n`<span>标签`中的src属性的为当前图片的缩略图地址 我们暂不考虑 4K图片才是我们要的 :smile: \n\n此页面没有4k图的下载地址 打开图片的详情页面 按下`F12` 选中下载原图 查看标签 如下\n\n![](https://s2.loli.net/2021/12/25/cTAbJPukp4tQNdF.png)\n\n点击下载原图 可以看到需要登录才可以下载 所以后续编辑代码时需要在代码模拟请求中将`Cookie信息添加到请求头`中 \n\nF12选中下载原图后可以看到这个`<a>`标签 `<a href=\"javascript:;\" data-id=\"21617\">下载原图(4000x2357)</a>` 暂时qq登录 进行一元的充值 获取长达7天的下载时间后 :mask:  我们可以看到点击下载原图就可以触发浏览器下载  在href属性中我们并没有看到对应的下载链接 打开`network`后可以看到\n\n![](https://s2.loli.net/2021/12/25/zSxgGuOw4XKakNo.png)\n\n有两条请求记录存在  看请求名字可以推算到 是图片的下载请求 分别是<http://pic.netbian.com/e/extend/downpic.php?id=21617&t=0.7504811318948537> 以及<http://pic.netbian.com/downpic.php?id=21617&classid=66>\n\n查看 第一条和第二条的响应头中的`Content-Type`可以看到\n\n![](https://s2.loli.net/2021/12/25/TFVSsMyHOGDudB8.png)\n\n![](https://s2.loli.net/2021/12/25/M8CObtXd4xJqnNZ.png)\n\n第二个请求的响应头`content-Type`类型为`image/jpg` 因此第二条请求为真正的图片下载链接\t\n\n在查看第一条请求的`Response` 我们可以看到 \n\n![](https://s2.loli.net/2021/12/25/TRgJ8eDpWZC1E2d.png)\n\n响应数据是第二条的请求的请求路径  也就是说我们需要请求第一条路径拿到返回的路径信息 再请求真正的图片下载路径  但是经测试发现第二条的请求路径格式固定 只有其中的参数`id`代表不同的图片 而且其中的第二个参数`classid` 完全不用传入 仍然可以进行下载。而参数`id`的值就是详情页的下载原图按钮中的的`<a>标签`中的`data-id属性的值` 如下\n\n![](https://s2.loli.net/2021/12/25/ajyu5NnGFMlHvJ3.png)\n\n因此我们的最终下载链接即为<http://pic.netbian.com/downpic.php?id=21617>\n\n我们的只需要通过爬虫获取`data-id`的值拼接到此路径中即可  `一定要模拟登录状态，即加入cookie信息,不然下载下来的照片大小为0 打开为损坏状态`\n\n#### 2.翻页分析\n\n首页为<http://pic.netbian.com>\n\n第二页为<http://pic.netbian.com/index_2.html>\n\n第三页为<http://pic.netbian.com/index_3.html>\n\n因此翻页的路径变化就是页码的变化 \n\n因此编写爬虫逻辑的时候需要区分首页和之后的页面 对应不同的路径\n\n### 二、代码实现\n\n#### 1.创建枚举类`SiteUrls`\n\n```java\npublic enum SiteUrls {\n\n    SITEURL(\"http://pic.netbian.com\"), // 首页网址前缀\n    PAGEURLPREFIX(\"http://pic.netbian.com/4kdongman/index_\"), // 多页网址前缀(第一页、第二页等)\n    DETAILPAGE(\"http://pic.netbian.com/tupian\"), // 当前图片详情页网址前缀\n    DOWNURL(\"http://pic.netbian.com/downpic.php?id=\"); // 图片下载地址前缀\n\n    private String url;\n\n    SiteUrls(String url) {\n        this.url = url;\n    }\n\n    public String getUrl() {\n        return this.url;\n    }\n\n}\n```\n\n#### 2.创建爬虫逻辑抽取类`PicProcesso`\n\n```java\npublic class PicProcessor implements PageProcessor {\n\n    private Site site = Site.me().setRetryTimes(3).setRetrySleepTime(1000);\n\n    @Override\n    // process是定制爬虫逻辑的核心接口，在这里编写抽取逻辑\n    public void process(Page page) {\n        if (page.getUrl().toString().startsWith(SiteUrls.DETAILPAGE.getUrl())) { // 详情页\n            // 通过css样式定位到具体所需要的信息标签 获取属性中的信息\n            String picId = page.getHtml().css(\"div.downpic a\", \"data-id\").get();\n            // 调用下载方法 传入下载路径\n            DownloadUtil.downloadPic(SiteUrls.DOWNURL.getUrl() + picId, picId);\n        } else {  // 表示列表页\n            // 拿到一个列表页中多个图片的不同图片详情网址列表\n            List<String> hrefs = page.getHtml().css(\"ul.clearfix>li>a\", \"href\").all();\n            for (String href : hrefs) {\n                // 加入任务队列\n                page.addTargetRequest(href);\n            }\n            // 获取当前列表url 进行字符串切割 获取当前页码\n            String url = page.getUrl().get();\n            String s = StringUtils.substringAfter(url,\"_\");\n            String i = StringUtils.substringBefore(s, \".\");\n            if (\"\".equals(i)) {\n                // 为空表示当前页为首页 进行第二页跳转\n                i = \"2\";\n            }else {\n                // 页码加1\n                i = (Integer.parseInt(i)+1)+\"\";\n            }\n            // 将下一页列表页加入到任务队列\n            page.addTargetRequest(SiteUrls.PAGEURLPREFIX.getUrl() + i + \".html\");\n        }\n    }\n\n    @Override\n    public Site getSite() {\n        return site;\n    }\n}\n\n```\n\n#### 3.创建图片下载工具类`DownloadUtil`\n\n```java\npublic class DownloadUtil {\n\n    public static void downloadPic(String url, String picId) {\n            FileOutputStream stream = null;\n        try {\n            RestTemplate template = new RestTemplate();\n            // 设置请求头信息 cookie和referer\n            HttpHeaders headers = new HttpHeaders();\n            headers.add(\"Cookie\",\"\");\n            headers.add(\"User-Agent\",\"\");\n            headers.add(\"Referer\",\"\");\n            HttpEntity<String> httpEntity = new HttpEntity<String>(null, headers);\n            ResponseEntity<byte[]> entity = template.exchange(url, HttpMethod.GET, httpEntity, byte[].class);\n            // 获取图片信息\n            byte[] picData = entity.getBody();\n            // 设置图片下载路径\n            stream = new FileOutputStream(new File(\"C:\\\\Users\\\\Dell\\\\Desktop\\\\图片\\\\\"+picId+\".jpg\"));\n            // 信息写入文件\n            stream.write(picData);\n            } catch (Exception e) {\n                e.printStackTrace();\n                System.out.println(\"图片下载失败\");\n            }finally {\n            try {\n                stream.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n\n    }\n\n}\n```\n\n`下载类的9、10、11空的信息请自行填写，如有帮助或者需要超级会员无限下载的账号信息请联系我`\n\n#### 4.代码启动入口类`Run`\n\n```java\npublic class Run {\n    public static void main(String[] args) {\n\t\t// 通过抽取逻辑对象创建自定义爬虫对象 添加首页网址以及设置爬取的线程数量 默认5个  \n        Spider.create(new PicProcessor()).addUrl(SiteUrls.SITEURL.getUrl())\n                .thread(5).run();\n    }\n}\n```\n\n`此文章仅供学习参考，如有问题，欢迎下方评论谢谢！！！`","slug":"WebMagic的简单使用","published":1,"date":"2021-06-05T12:47:50.000Z","updated":"2021-12-25T10:05:34.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxmwv05k0001jw6h9469dvu8","content":"<h1 id=\"WebMagic的简单使用\"><a href=\"#WebMagic的简单使用\" class=\"headerlink\" title=\"WebMagic的简单使用\"></a>WebMagic的简单使用</h1><h2 id=\"WebMagic介绍\"><a href=\"#WebMagic介绍\" class=\"headerlink\" title=\"WebMagic介绍\"></a>WebMagic介绍</h2><h3 id=\"1-1-WebMagic概览\"><a href=\"#1-1-WebMagic概览\" class=\"headerlink\" title=\"1.1 WebMagic概览\"></a>1.1 WebMagic概览</h3><p>[toc]WebMagic是一个简单灵活的Java爬虫框架。基于WebMagic，你可以快速开发出一个高效、易维护的爬虫。</p>\n<p>WebMagic项目代码分为核心和扩展两部分。核心部分(webmagic-core)是一个精简的、模块化的爬虫实现，而扩展部分则包括一些便利的、实用性的功能。WebMagic的架构设计参照了Scrapy，目标是尽量的模块化，并体现爬虫的功能特点。</p>\n<p>这部分提供非常简单、灵活的API，在基本不改变开发模式的情况下，编写一个爬虫。</p>\n<p>扩展部分(webmagic-extension)提供一些便捷的功能，例如注解模式编写爬虫等。同时内置了一些常用的组件，便于爬虫开发。</p>\n<h3 id=\"1-2-特性：\"><a href=\"#1-2-特性：\" class=\"headerlink\" title=\"1.2 特性：\"></a>1.2 特性：</h3><ul>\n<li>简单的API，可快速上手</li>\n<li>模块化的结构，可轻松扩展</li>\n<li>提供多线程和分布式支持</li>\n</ul>\n<h3 id=\"1-3-总体架构\"><a href=\"#1-3-总体架构\" class=\"headerlink\" title=\"1.3 总体架构\"></a>1.3 总体架构</h3><p>WebMagic的结构分为<code>Downloader</code>、<code>PageProcessor</code>、<code>Scheduler</code>、<code>Pipeline</code>四大组件，并由Spider将它们彼此组织起来。这四大组件对应爬虫生命周期中的下载、处理、管理和持久化等功能。WebMagic的设计参考了Scapy，但是实现方式更Java化一些。</p>\n<p>而Spider则将这几个组件组织起来，让它们可以互相交互，流程化的执行，可以认为Spider是一个大的容器，它也是WebMagic逻辑的核心。</p>\n<p>一般情况下我们只需要实现<code>PageProcessor</code>接口，自定义我们的爬虫抽取逻辑即可。</p>\n<h3 id=\"1-3-1-WebMagic的四个组件\"><a href=\"#1-3-1-WebMagic的四个组件\" class=\"headerlink\" title=\"1.3.1 WebMagic的四个组件\"></a>1.3.1 WebMagic的四个组件</h3><h4 id=\"1-Downloader\"><a href=\"#1-Downloader\" class=\"headerlink\" title=\"1.Downloader\"></a>1.Downloader</h4><p>Downloader负责从互联网上下载页面，以便后续处理。WebMagic默认使用了<a href=\"http://hc.apache.org/index.html\">Apache HttpClient</a>作为下载工具。</p>\n<h4 id=\"2-PageProcessor\"><a href=\"#2-PageProcessor\" class=\"headerlink\" title=\"2.PageProcessor\"></a>2.PageProcessor</h4><p>PageProcessor负责解析页面，抽取有用信息，以及发现新的链接。WebMagic使用<a href=\"http://jsoup.org/\">Jsoup</a>作为HTML解析工具，并基于其开发了解析XPath的工具<a href=\"https://github.com/code4craft/xsoup\">Xsoup</a>。</p>\n<p>在这四个组件中，<code>PageProcessor</code>对于每个站点每个页面都不一样，是需要使用者定制的部分。</p>\n<h4 id=\"3-Scheduler\"><a href=\"#3-Scheduler\" class=\"headerlink\" title=\"3.Scheduler\"></a>3.Scheduler</h4><p>Scheduler负责管理待抓取的URL，以及一些去重的工作。WebMagic默认提供了JDK的内存队列来管理URL，并用集合来进行去重。也支持使用Redis进行分布式管理。</p>\n<p>除非项目有一些特殊的分布式需求，否则无需自己定制Scheduler。</p>\n<h4 id=\"4-Pipeline\"><a href=\"#4-Pipeline\" class=\"headerlink\" title=\"4.Pipeline\"></a>4.Pipeline</h4><p>Pipeline负责抽取结果的处理，包括计算、持久化到文件、数据库等。WebMagic默认提供了“输出到控制台”和“保存到文件”两种结果处理方案。</p>\n<p><code>Pipeline</code>定义了结果保存的方式，如果你要保存到指定数据库，则需要编写对应的Pipeline。对于一类需求一般只需编写一个<code>Pipeline</code>。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li>Github地址：<a href=\"https://github.com/code4craft/webmagic\">https://github.com/code4craft/webmagic</a></li>\n<li>中文文档：<a href=\"http://webmagic.io/docs/zh/\">http://webmagic.io/docs/zh/</a></li>\n</ul>\n<h2 id=\"WebMagic的彼岸图网的DEMO\"><a href=\"#WebMagic的彼岸图网的DEMO\" class=\"headerlink\" title=\"WebMagic的彼岸图网的DEMO\"></a>WebMagic的彼岸图网的DEMO</h2><h3 id=\"一、打开爬取的页面进行分析\"><a href=\"#一、打开爬取的页面进行分析\" class=\"headerlink\" title=\"一、打开爬取的页面进行分析\"></a>一、打开爬取的页面进行分析</h3><h4 id=\"1-下载路径分析\"><a href=\"#1-下载路径分析\" class=\"headerlink\" title=\"1.下载路径分析\"></a>1.下载路径分析</h4><p>以此网址<a href=\"http://pic.netbian.com/\">http://pic.netbian.com</a>为默认首页，打开页面如下所示：</p>\n<p><img src=\"https://s2.loli.net/2021/12/25/HlItCZwQBRUW8Mp.png\" alt=\"彼岸图网首页\"></p>\n<p>按<code>F12</code>打开如下页面 选中一张图片可以看到如下便签</p>\n<p><img src=\"https://s2.loli.net/2021/12/25/GFCnrTftYoAyXLq.png\"></p>\n<p>我们可以看到很鲜明的标签规律  一个<code>&lt;li&gt;标签</code>是一张图片 每个里面包含一个<code>&lt;a&gt;标签</code>和一个<code>&lt;span&gt;标签</code>  <code>&lt;a&gt;标签</code>中的href属性为图片的详情地址后缀，将其拼接在首页的网址后面即可打开当前图片的详情页面</p>\n<p><code>&lt;span&gt;标签</code>中的src属性的为当前图片的缩略图地址 我们暂不考虑 4K图片才是我们要的 :smile: </p>\n<p>此页面没有4k图的下载地址 打开图片的详情页面 按下<code>F12</code> 选中下载原图 查看标签 如下</p>\n<p><img src=\"https://s2.loli.net/2021/12/25/cTAbJPukp4tQNdF.png\"></p>\n<p>点击下载原图 可以看到需要登录才可以下载 所以后续编辑代码时需要在代码模拟请求中将<code>Cookie信息添加到请求头</code>中 </p>\n<p>F12选中下载原图后可以看到这个<code>&lt;a&gt;</code>标签 <code>&lt;a href=&quot;javascript:;&quot; data-id=&quot;21617&quot;&gt;下载原图(4000x2357)&lt;/a&gt;</code> 暂时qq登录 进行一元的充值 获取长达7天的下载时间后 :mask:  我们可以看到点击下载原图就可以触发浏览器下载  在href属性中我们并没有看到对应的下载链接 打开<code>network</code>后可以看到</p>\n<p><img src=\"https://s2.loli.net/2021/12/25/zSxgGuOw4XKakNo.png\"></p>\n<p>有两条请求记录存在  看请求名字可以推算到 是图片的下载请求 分别是<a href=\"http://pic.netbian.com/e/extend/downpic.php?id=21617&amp;t=0.7504811318948537\">http://pic.netbian.com/e/extend/downpic.php?id=21617&amp;t=0.7504811318948537</a> 以及<a href=\"http://pic.netbian.com/downpic.php?id=21617&amp;classid=66\">http://pic.netbian.com/downpic.php?id=21617&amp;classid=66</a></p>\n<p>查看 第一条和第二条的响应头中的<code>Content-Type</code>可以看到</p>\n<p><img src=\"https://s2.loli.net/2021/12/25/TFVSsMyHOGDudB8.png\"></p>\n<p><img src=\"https://s2.loli.net/2021/12/25/M8CObtXd4xJqnNZ.png\"></p>\n<p>第二个请求的响应头<code>content-Type</code>类型为<code>image/jpg</code> 因此第二条请求为真正的图片下载链接    </p>\n<p>在查看第一条请求的<code>Response</code> 我们可以看到 </p>\n<p><img src=\"https://s2.loli.net/2021/12/25/TRgJ8eDpWZC1E2d.png\"></p>\n<p>响应数据是第二条的请求的请求路径  也就是说我们需要请求第一条路径拿到返回的路径信息 再请求真正的图片下载路径  但是经测试发现第二条的请求路径格式固定 只有其中的参数<code>id</code>代表不同的图片 而且其中的第二个参数<code>classid</code> 完全不用传入 仍然可以进行下载。而参数<code>id</code>的值就是详情页的下载原图按钮中的的<code>&lt;a&gt;标签</code>中的<code>data-id属性的值</code> 如下</p>\n<p><img src=\"https://s2.loli.net/2021/12/25/ajyu5NnGFMlHvJ3.png\"></p>\n<p>因此我们的最终下载链接即为<a href=\"http://pic.netbian.com/downpic.php?id=21617\">http://pic.netbian.com/downpic.php?id=21617</a></p>\n<p>我们的只需要通过爬虫获取<code>data-id</code>的值拼接到此路径中即可  <code>一定要模拟登录状态，即加入cookie信息,不然下载下来的照片大小为0 打开为损坏状态</code></p>\n<h4 id=\"2-翻页分析\"><a href=\"#2-翻页分析\" class=\"headerlink\" title=\"2.翻页分析\"></a>2.翻页分析</h4><p>首页为<a href=\"http://pic.netbian.com/\">http://pic.netbian.com</a></p>\n<p>第二页为<a href=\"http://pic.netbian.com/index_2.html\">http://pic.netbian.com/index_2.html</a></p>\n<p>第三页为<a href=\"http://pic.netbian.com/index_3.html\">http://pic.netbian.com/index_3.html</a></p>\n<p>因此翻页的路径变化就是页码的变化 </p>\n<p>因此编写爬虫逻辑的时候需要区分首页和之后的页面 对应不同的路径</p>\n<h3 id=\"二、代码实现\"><a href=\"#二、代码实现\" class=\"headerlink\" title=\"二、代码实现\"></a>二、代码实现</h3><h4 id=\"1-创建枚举类SiteUrls\"><a href=\"#1-创建枚举类SiteUrls\" class=\"headerlink\" title=\"1.创建枚举类SiteUrls\"></a>1.创建枚举类<code>SiteUrls</code></h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">SiteUrls</span> </span>&#123;<br><br>    SITEURL(<span class=\"hljs-string\">&quot;http://pic.netbian.com&quot;</span>), <span class=\"hljs-comment\">// 首页网址前缀</span><br>    PAGEURLPREFIX(<span class=\"hljs-string\">&quot;http://pic.netbian.com/4kdongman/index_&quot;</span>), <span class=\"hljs-comment\">// 多页网址前缀(第一页、第二页等)</span><br>    DETAILPAGE(<span class=\"hljs-string\">&quot;http://pic.netbian.com/tupian&quot;</span>), <span class=\"hljs-comment\">// 当前图片详情页网址前缀</span><br>    DOWNURL(<span class=\"hljs-string\">&quot;http://pic.netbian.com/downpic.php?id=&quot;</span>); <span class=\"hljs-comment\">// 图片下载地址前缀</span><br><br>    <span class=\"hljs-keyword\">private</span> String url;<br><br>    SiteUrls(String url) &#123;<br>        <span class=\"hljs-keyword\">this</span>.url = url;<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getUrl</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.url;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-创建爬虫逻辑抽取类PicProcesso\"><a href=\"#2-创建爬虫逻辑抽取类PicProcesso\" class=\"headerlink\" title=\"2.创建爬虫逻辑抽取类PicProcesso\"></a>2.创建爬虫逻辑抽取类<code>PicProcesso</code></h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PicProcessor</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">PageProcessor</span> </span>&#123;<br><br>    <span class=\"hljs-keyword\">private</span> Site site = Site.me().setRetryTimes(<span class=\"hljs-number\">3</span>).setRetrySleepTime(<span class=\"hljs-number\">1000</span>);<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-comment\">// process是定制爬虫逻辑的核心接口，在这里编写抽取逻辑</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">process</span><span class=\"hljs-params\">(Page page)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (page.getUrl().toString().startsWith(SiteUrls.DETAILPAGE.getUrl())) &#123; <span class=\"hljs-comment\">// 详情页</span><br>            <span class=\"hljs-comment\">// 通过css样式定位到具体所需要的信息标签 获取属性中的信息</span><br>            String picId = page.getHtml().css(<span class=\"hljs-string\">&quot;div.downpic a&quot;</span>, <span class=\"hljs-string\">&quot;data-id&quot;</span>).get();<br>            <span class=\"hljs-comment\">// 调用下载方法 传入下载路径</span><br>            DownloadUtil.downloadPic(SiteUrls.DOWNURL.getUrl() + picId, picId);<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;  <span class=\"hljs-comment\">// 表示列表页</span><br>            <span class=\"hljs-comment\">// 拿到一个列表页中多个图片的不同图片详情网址列表</span><br>            List&lt;String&gt; hrefs = page.getHtml().css(<span class=\"hljs-string\">&quot;ul.clearfix&gt;li&gt;a&quot;</span>, <span class=\"hljs-string\">&quot;href&quot;</span>).all();<br>            <span class=\"hljs-keyword\">for</span> (String href : hrefs) &#123;<br>                <span class=\"hljs-comment\">// 加入任务队列</span><br>                page.addTargetRequest(href);<br>            &#125;<br>            <span class=\"hljs-comment\">// 获取当前列表url 进行字符串切割 获取当前页码</span><br>            String url = page.getUrl().get();<br>            String s = StringUtils.substringAfter(url,<span class=\"hljs-string\">&quot;_&quot;</span>);<br>            String i = StringUtils.substringBefore(s, <span class=\"hljs-string\">&quot;.&quot;</span>);<br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;&quot;</span>.equals(i)) &#123;<br>                <span class=\"hljs-comment\">// 为空表示当前页为首页 进行第二页跳转</span><br>                i = <span class=\"hljs-string\">&quot;2&quot;</span>;<br>            &#125;<span class=\"hljs-keyword\">else</span> &#123;<br>                <span class=\"hljs-comment\">// 页码加1</span><br>                i = (Integer.parseInt(i)+<span class=\"hljs-number\">1</span>)+<span class=\"hljs-string\">&quot;&quot;</span>;<br>            &#125;<br>            <span class=\"hljs-comment\">// 将下一页列表页加入到任务队列</span><br>            page.addTargetRequest(SiteUrls.PAGEURLPREFIX.getUrl() + i + <span class=\"hljs-string\">&quot;.html&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Site <span class=\"hljs-title\">getSite</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> site;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"3-创建图片下载工具类DownloadUtil\"><a href=\"#3-创建图片下载工具类DownloadUtil\" class=\"headerlink\" title=\"3.创建图片下载工具类DownloadUtil\"></a>3.创建图片下载工具类<code>DownloadUtil</code></h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DownloadUtil</span> </span>&#123;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">downloadPic</span><span class=\"hljs-params\">(String url, String picId)</span> </span>&#123;<br>            FileOutputStream stream = <span class=\"hljs-keyword\">null</span>;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            RestTemplate template = <span class=\"hljs-keyword\">new</span> RestTemplate();<br>            <span class=\"hljs-comment\">// 设置请求头信息 cookie和referer</span><br>            HttpHeaders headers = <span class=\"hljs-keyword\">new</span> HttpHeaders();<br>            headers.add(<span class=\"hljs-string\">&quot;Cookie&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>);<br>            headers.add(<span class=\"hljs-string\">&quot;User-Agent&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>);<br>            headers.add(<span class=\"hljs-string\">&quot;Referer&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>);<br>            HttpEntity&lt;String&gt; httpEntity = <span class=\"hljs-keyword\">new</span> HttpEntity&lt;String&gt;(<span class=\"hljs-keyword\">null</span>, headers);<br>            ResponseEntity&lt;<span class=\"hljs-keyword\">byte</span>[]&gt; entity = template.exchange(url, HttpMethod.GET, httpEntity, <span class=\"hljs-keyword\">byte</span>[].class);<br>            <span class=\"hljs-comment\">// 获取图片信息</span><br>            <span class=\"hljs-keyword\">byte</span>[] picData = entity.getBody();<br>            <span class=\"hljs-comment\">// 设置图片下载路径</span><br>            stream = <span class=\"hljs-keyword\">new</span> FileOutputStream(<span class=\"hljs-keyword\">new</span> File(<span class=\"hljs-string\">&quot;C:\\\\Users\\\\Dell\\\\Desktop\\\\图片\\\\&quot;</span>+picId+<span class=\"hljs-string\">&quot;.jpg&quot;</span>));<br>            <span class=\"hljs-comment\">// 信息写入文件</span><br>            stream.write(picData);<br>            &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>                System.out.println(<span class=\"hljs-string\">&quot;图片下载失败&quot;</span>);<br>            &#125;<span class=\"hljs-keyword\">finally</span> &#123;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                stream.close();<br>            &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><code>下载类的9、10、11空的信息请自行填写，如有帮助或者需要超级会员无限下载的账号信息请联系我</code></p>\n<h4 id=\"4-代码启动入口类Run\"><a href=\"#4-代码启动入口类Run\" class=\"headerlink\" title=\"4.代码启动入口类Run\"></a>4.代码启动入口类<code>Run</code></h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Run</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>\t\t<span class=\"hljs-comment\">// 通过抽取逻辑对象创建自定义爬虫对象 添加首页网址以及设置爬取的线程数量 默认5个  </span><br>        Spider.create(<span class=\"hljs-keyword\">new</span> PicProcessor()).addUrl(SiteUrls.SITEURL.getUrl())<br>                .thread(<span class=\"hljs-number\">5</span>).run();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><code>此文章仅供学习参考，如有问题，欢迎下方评论谢谢！！！</code></p>\n","site":{"data":{}},"wordcount":5525,"excerpt":"","more":"<h1 id=\"WebMagic的简单使用\"><a href=\"#WebMagic的简单使用\" class=\"headerlink\" title=\"WebMagic的简单使用\"></a>WebMagic的简单使用</h1><h2 id=\"WebMagic介绍\"><a href=\"#WebMagic介绍\" class=\"headerlink\" title=\"WebMagic介绍\"></a>WebMagic介绍</h2><h3 id=\"1-1-WebMagic概览\"><a href=\"#1-1-WebMagic概览\" class=\"headerlink\" title=\"1.1 WebMagic概览\"></a>1.1 WebMagic概览</h3><p>[toc]WebMagic是一个简单灵活的Java爬虫框架。基于WebMagic，你可以快速开发出一个高效、易维护的爬虫。</p>\n<p>WebMagic项目代码分为核心和扩展两部分。核心部分(webmagic-core)是一个精简的、模块化的爬虫实现，而扩展部分则包括一些便利的、实用性的功能。WebMagic的架构设计参照了Scrapy，目标是尽量的模块化，并体现爬虫的功能特点。</p>\n<p>这部分提供非常简单、灵活的API，在基本不改变开发模式的情况下，编写一个爬虫。</p>\n<p>扩展部分(webmagic-extension)提供一些便捷的功能，例如注解模式编写爬虫等。同时内置了一些常用的组件，便于爬虫开发。</p>\n<h3 id=\"1-2-特性：\"><a href=\"#1-2-特性：\" class=\"headerlink\" title=\"1.2 特性：\"></a>1.2 特性：</h3><ul>\n<li>简单的API，可快速上手</li>\n<li>模块化的结构，可轻松扩展</li>\n<li>提供多线程和分布式支持</li>\n</ul>\n<h3 id=\"1-3-总体架构\"><a href=\"#1-3-总体架构\" class=\"headerlink\" title=\"1.3 总体架构\"></a>1.3 总体架构</h3><p>WebMagic的结构分为<code>Downloader</code>、<code>PageProcessor</code>、<code>Scheduler</code>、<code>Pipeline</code>四大组件，并由Spider将它们彼此组织起来。这四大组件对应爬虫生命周期中的下载、处理、管理和持久化等功能。WebMagic的设计参考了Scapy，但是实现方式更Java化一些。</p>\n<p>而Spider则将这几个组件组织起来，让它们可以互相交互，流程化的执行，可以认为Spider是一个大的容器，它也是WebMagic逻辑的核心。</p>\n<p>一般情况下我们只需要实现<code>PageProcessor</code>接口，自定义我们的爬虫抽取逻辑即可。</p>\n<h3 id=\"1-3-1-WebMagic的四个组件\"><a href=\"#1-3-1-WebMagic的四个组件\" class=\"headerlink\" title=\"1.3.1 WebMagic的四个组件\"></a>1.3.1 WebMagic的四个组件</h3><h4 id=\"1-Downloader\"><a href=\"#1-Downloader\" class=\"headerlink\" title=\"1.Downloader\"></a>1.Downloader</h4><p>Downloader负责从互联网上下载页面，以便后续处理。WebMagic默认使用了<a href=\"http://hc.apache.org/index.html\">Apache HttpClient</a>作为下载工具。</p>\n<h4 id=\"2-PageProcessor\"><a href=\"#2-PageProcessor\" class=\"headerlink\" title=\"2.PageProcessor\"></a>2.PageProcessor</h4><p>PageProcessor负责解析页面，抽取有用信息，以及发现新的链接。WebMagic使用<a href=\"http://jsoup.org/\">Jsoup</a>作为HTML解析工具，并基于其开发了解析XPath的工具<a href=\"https://github.com/code4craft/xsoup\">Xsoup</a>。</p>\n<p>在这四个组件中，<code>PageProcessor</code>对于每个站点每个页面都不一样，是需要使用者定制的部分。</p>\n<h4 id=\"3-Scheduler\"><a href=\"#3-Scheduler\" class=\"headerlink\" title=\"3.Scheduler\"></a>3.Scheduler</h4><p>Scheduler负责管理待抓取的URL，以及一些去重的工作。WebMagic默认提供了JDK的内存队列来管理URL，并用集合来进行去重。也支持使用Redis进行分布式管理。</p>\n<p>除非项目有一些特殊的分布式需求，否则无需自己定制Scheduler。</p>\n<h4 id=\"4-Pipeline\"><a href=\"#4-Pipeline\" class=\"headerlink\" title=\"4.Pipeline\"></a>4.Pipeline</h4><p>Pipeline负责抽取结果的处理，包括计算、持久化到文件、数据库等。WebMagic默认提供了“输出到控制台”和“保存到文件”两种结果处理方案。</p>\n<p><code>Pipeline</code>定义了结果保存的方式，如果你要保存到指定数据库，则需要编写对应的Pipeline。对于一类需求一般只需编写一个<code>Pipeline</code>。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li>Github地址：<a href=\"https://github.com/code4craft/webmagic\">https://github.com/code4craft/webmagic</a></li>\n<li>中文文档：<a href=\"http://webmagic.io/docs/zh/\">http://webmagic.io/docs/zh/</a></li>\n</ul>\n<h2 id=\"WebMagic的彼岸图网的DEMO\"><a href=\"#WebMagic的彼岸图网的DEMO\" class=\"headerlink\" title=\"WebMagic的彼岸图网的DEMO\"></a>WebMagic的彼岸图网的DEMO</h2><h3 id=\"一、打开爬取的页面进行分析\"><a href=\"#一、打开爬取的页面进行分析\" class=\"headerlink\" title=\"一、打开爬取的页面进行分析\"></a>一、打开爬取的页面进行分析</h3><h4 id=\"1-下载路径分析\"><a href=\"#1-下载路径分析\" class=\"headerlink\" title=\"1.下载路径分析\"></a>1.下载路径分析</h4><p>以此网址<a href=\"http://pic.netbian.com/\">http://pic.netbian.com</a>为默认首页，打开页面如下所示：</p>\n<p><img src=\"https://s2.loli.net/2021/12/25/HlItCZwQBRUW8Mp.png\" alt=\"彼岸图网首页\"></p>\n<p>按<code>F12</code>打开如下页面 选中一张图片可以看到如下便签</p>\n<p><img src=\"https://s2.loli.net/2021/12/25/GFCnrTftYoAyXLq.png\"></p>\n<p>我们可以看到很鲜明的标签规律  一个<code>&lt;li&gt;标签</code>是一张图片 每个里面包含一个<code>&lt;a&gt;标签</code>和一个<code>&lt;span&gt;标签</code>  <code>&lt;a&gt;标签</code>中的href属性为图片的详情地址后缀，将其拼接在首页的网址后面即可打开当前图片的详情页面</p>\n<p><code>&lt;span&gt;标签</code>中的src属性的为当前图片的缩略图地址 我们暂不考虑 4K图片才是我们要的 :smile: </p>\n<p>此页面没有4k图的下载地址 打开图片的详情页面 按下<code>F12</code> 选中下载原图 查看标签 如下</p>\n<p><img src=\"https://s2.loli.net/2021/12/25/cTAbJPukp4tQNdF.png\"></p>\n<p>点击下载原图 可以看到需要登录才可以下载 所以后续编辑代码时需要在代码模拟请求中将<code>Cookie信息添加到请求头</code>中 </p>\n<p>F12选中下载原图后可以看到这个<code>&lt;a&gt;</code>标签 <code>&lt;a href=&quot;javascript:;&quot; data-id=&quot;21617&quot;&gt;下载原图(4000x2357)&lt;/a&gt;</code> 暂时qq登录 进行一元的充值 获取长达7天的下载时间后 :mask:  我们可以看到点击下载原图就可以触发浏览器下载  在href属性中我们并没有看到对应的下载链接 打开<code>network</code>后可以看到</p>\n<p><img src=\"https://s2.loli.net/2021/12/25/zSxgGuOw4XKakNo.png\"></p>\n<p>有两条请求记录存在  看请求名字可以推算到 是图片的下载请求 分别是<a href=\"http://pic.netbian.com/e/extend/downpic.php?id=21617&amp;t=0.7504811318948537\">http://pic.netbian.com/e/extend/downpic.php?id=21617&amp;t=0.7504811318948537</a> 以及<a href=\"http://pic.netbian.com/downpic.php?id=21617&amp;classid=66\">http://pic.netbian.com/downpic.php?id=21617&amp;classid=66</a></p>\n<p>查看 第一条和第二条的响应头中的<code>Content-Type</code>可以看到</p>\n<p><img src=\"https://s2.loli.net/2021/12/25/TFVSsMyHOGDudB8.png\"></p>\n<p><img src=\"https://s2.loli.net/2021/12/25/M8CObtXd4xJqnNZ.png\"></p>\n<p>第二个请求的响应头<code>content-Type</code>类型为<code>image/jpg</code> 因此第二条请求为真正的图片下载链接    </p>\n<p>在查看第一条请求的<code>Response</code> 我们可以看到 </p>\n<p><img src=\"https://s2.loli.net/2021/12/25/TRgJ8eDpWZC1E2d.png\"></p>\n<p>响应数据是第二条的请求的请求路径  也就是说我们需要请求第一条路径拿到返回的路径信息 再请求真正的图片下载路径  但是经测试发现第二条的请求路径格式固定 只有其中的参数<code>id</code>代表不同的图片 而且其中的第二个参数<code>classid</code> 完全不用传入 仍然可以进行下载。而参数<code>id</code>的值就是详情页的下载原图按钮中的的<code>&lt;a&gt;标签</code>中的<code>data-id属性的值</code> 如下</p>\n<p><img src=\"https://s2.loli.net/2021/12/25/ajyu5NnGFMlHvJ3.png\"></p>\n<p>因此我们的最终下载链接即为<a href=\"http://pic.netbian.com/downpic.php?id=21617\">http://pic.netbian.com/downpic.php?id=21617</a></p>\n<p>我们的只需要通过爬虫获取<code>data-id</code>的值拼接到此路径中即可  <code>一定要模拟登录状态，即加入cookie信息,不然下载下来的照片大小为0 打开为损坏状态</code></p>\n<h4 id=\"2-翻页分析\"><a href=\"#2-翻页分析\" class=\"headerlink\" title=\"2.翻页分析\"></a>2.翻页分析</h4><p>首页为<a href=\"http://pic.netbian.com/\">http://pic.netbian.com</a></p>\n<p>第二页为<a href=\"http://pic.netbian.com/index_2.html\">http://pic.netbian.com/index_2.html</a></p>\n<p>第三页为<a href=\"http://pic.netbian.com/index_3.html\">http://pic.netbian.com/index_3.html</a></p>\n<p>因此翻页的路径变化就是页码的变化 </p>\n<p>因此编写爬虫逻辑的时候需要区分首页和之后的页面 对应不同的路径</p>\n<h3 id=\"二、代码实现\"><a href=\"#二、代码实现\" class=\"headerlink\" title=\"二、代码实现\"></a>二、代码实现</h3><h4 id=\"1-创建枚举类SiteUrls\"><a href=\"#1-创建枚举类SiteUrls\" class=\"headerlink\" title=\"1.创建枚举类SiteUrls\"></a>1.创建枚举类<code>SiteUrls</code></h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">SiteUrls</span> </span>&#123;<br><br>    SITEURL(<span class=\"hljs-string\">&quot;http://pic.netbian.com&quot;</span>), <span class=\"hljs-comment\">// 首页网址前缀</span><br>    PAGEURLPREFIX(<span class=\"hljs-string\">&quot;http://pic.netbian.com/4kdongman/index_&quot;</span>), <span class=\"hljs-comment\">// 多页网址前缀(第一页、第二页等)</span><br>    DETAILPAGE(<span class=\"hljs-string\">&quot;http://pic.netbian.com/tupian&quot;</span>), <span class=\"hljs-comment\">// 当前图片详情页网址前缀</span><br>    DOWNURL(<span class=\"hljs-string\">&quot;http://pic.netbian.com/downpic.php?id=&quot;</span>); <span class=\"hljs-comment\">// 图片下载地址前缀</span><br><br>    <span class=\"hljs-keyword\">private</span> String url;<br><br>    SiteUrls(String url) &#123;<br>        <span class=\"hljs-keyword\">this</span>.url = url;<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getUrl</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.url;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-创建爬虫逻辑抽取类PicProcesso\"><a href=\"#2-创建爬虫逻辑抽取类PicProcesso\" class=\"headerlink\" title=\"2.创建爬虫逻辑抽取类PicProcesso\"></a>2.创建爬虫逻辑抽取类<code>PicProcesso</code></h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PicProcessor</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">PageProcessor</span> </span>&#123;<br><br>    <span class=\"hljs-keyword\">private</span> Site site = Site.me().setRetryTimes(<span class=\"hljs-number\">3</span>).setRetrySleepTime(<span class=\"hljs-number\">1000</span>);<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-comment\">// process是定制爬虫逻辑的核心接口，在这里编写抽取逻辑</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">process</span><span class=\"hljs-params\">(Page page)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (page.getUrl().toString().startsWith(SiteUrls.DETAILPAGE.getUrl())) &#123; <span class=\"hljs-comment\">// 详情页</span><br>            <span class=\"hljs-comment\">// 通过css样式定位到具体所需要的信息标签 获取属性中的信息</span><br>            String picId = page.getHtml().css(<span class=\"hljs-string\">&quot;div.downpic a&quot;</span>, <span class=\"hljs-string\">&quot;data-id&quot;</span>).get();<br>            <span class=\"hljs-comment\">// 调用下载方法 传入下载路径</span><br>            DownloadUtil.downloadPic(SiteUrls.DOWNURL.getUrl() + picId, picId);<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;  <span class=\"hljs-comment\">// 表示列表页</span><br>            <span class=\"hljs-comment\">// 拿到一个列表页中多个图片的不同图片详情网址列表</span><br>            List&lt;String&gt; hrefs = page.getHtml().css(<span class=\"hljs-string\">&quot;ul.clearfix&gt;li&gt;a&quot;</span>, <span class=\"hljs-string\">&quot;href&quot;</span>).all();<br>            <span class=\"hljs-keyword\">for</span> (String href : hrefs) &#123;<br>                <span class=\"hljs-comment\">// 加入任务队列</span><br>                page.addTargetRequest(href);<br>            &#125;<br>            <span class=\"hljs-comment\">// 获取当前列表url 进行字符串切割 获取当前页码</span><br>            String url = page.getUrl().get();<br>            String s = StringUtils.substringAfter(url,<span class=\"hljs-string\">&quot;_&quot;</span>);<br>            String i = StringUtils.substringBefore(s, <span class=\"hljs-string\">&quot;.&quot;</span>);<br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;&quot;</span>.equals(i)) &#123;<br>                <span class=\"hljs-comment\">// 为空表示当前页为首页 进行第二页跳转</span><br>                i = <span class=\"hljs-string\">&quot;2&quot;</span>;<br>            &#125;<span class=\"hljs-keyword\">else</span> &#123;<br>                <span class=\"hljs-comment\">// 页码加1</span><br>                i = (Integer.parseInt(i)+<span class=\"hljs-number\">1</span>)+<span class=\"hljs-string\">&quot;&quot;</span>;<br>            &#125;<br>            <span class=\"hljs-comment\">// 将下一页列表页加入到任务队列</span><br>            page.addTargetRequest(SiteUrls.PAGEURLPREFIX.getUrl() + i + <span class=\"hljs-string\">&quot;.html&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Site <span class=\"hljs-title\">getSite</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> site;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"3-创建图片下载工具类DownloadUtil\"><a href=\"#3-创建图片下载工具类DownloadUtil\" class=\"headerlink\" title=\"3.创建图片下载工具类DownloadUtil\"></a>3.创建图片下载工具类<code>DownloadUtil</code></h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DownloadUtil</span> </span>&#123;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">downloadPic</span><span class=\"hljs-params\">(String url, String picId)</span> </span>&#123;<br>            FileOutputStream stream = <span class=\"hljs-keyword\">null</span>;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            RestTemplate template = <span class=\"hljs-keyword\">new</span> RestTemplate();<br>            <span class=\"hljs-comment\">// 设置请求头信息 cookie和referer</span><br>            HttpHeaders headers = <span class=\"hljs-keyword\">new</span> HttpHeaders();<br>            headers.add(<span class=\"hljs-string\">&quot;Cookie&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>);<br>            headers.add(<span class=\"hljs-string\">&quot;User-Agent&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>);<br>            headers.add(<span class=\"hljs-string\">&quot;Referer&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>);<br>            HttpEntity&lt;String&gt; httpEntity = <span class=\"hljs-keyword\">new</span> HttpEntity&lt;String&gt;(<span class=\"hljs-keyword\">null</span>, headers);<br>            ResponseEntity&lt;<span class=\"hljs-keyword\">byte</span>[]&gt; entity = template.exchange(url, HttpMethod.GET, httpEntity, <span class=\"hljs-keyword\">byte</span>[].class);<br>            <span class=\"hljs-comment\">// 获取图片信息</span><br>            <span class=\"hljs-keyword\">byte</span>[] picData = entity.getBody();<br>            <span class=\"hljs-comment\">// 设置图片下载路径</span><br>            stream = <span class=\"hljs-keyword\">new</span> FileOutputStream(<span class=\"hljs-keyword\">new</span> File(<span class=\"hljs-string\">&quot;C:\\\\Users\\\\Dell\\\\Desktop\\\\图片\\\\&quot;</span>+picId+<span class=\"hljs-string\">&quot;.jpg&quot;</span>));<br>            <span class=\"hljs-comment\">// 信息写入文件</span><br>            stream.write(picData);<br>            &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>                System.out.println(<span class=\"hljs-string\">&quot;图片下载失败&quot;</span>);<br>            &#125;<span class=\"hljs-keyword\">finally</span> &#123;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                stream.close();<br>            &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><code>下载类的9、10、11空的信息请自行填写，如有帮助或者需要超级会员无限下载的账号信息请联系我</code></p>\n<h4 id=\"4-代码启动入口类Run\"><a href=\"#4-代码启动入口类Run\" class=\"headerlink\" title=\"4.代码启动入口类Run\"></a>4.代码启动入口类<code>Run</code></h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Run</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>\t\t<span class=\"hljs-comment\">// 通过抽取逻辑对象创建自定义爬虫对象 添加首页网址以及设置爬取的线程数量 默认5个  </span><br>        Spider.create(<span class=\"hljs-keyword\">new</span> PicProcessor()).addUrl(SiteUrls.SITEURL.getUrl())<br>                .thread(<span class=\"hljs-number\">5</span>).run();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><code>此文章仅供学习参考，如有问题，欢迎下方评论谢谢！！！</code></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2021-12-26T02:52:20.134Z","updated":"2021-12-26T02:52:20.134Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxmwv05l0002jw6hey5m6zcw","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"wordcount":367,"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}